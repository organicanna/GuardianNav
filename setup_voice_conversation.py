#!/usr/bin/env python3
"""
INSTALLATION AUTOMATIQUE - GuardianNav Conversation Vocale
üöÄ Installe toutes les d√©pendances et t√©l√©charge le mod√®le Vosk fran√ßais
"""

import os
import sys
import subprocess
import urllib.request
import zipfile
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande avec gestion d'erreur"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - R√©ussi")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur:")
        print(f"   {e.stderr}")
        return False

def install_python_dependencies():
    """Installe les d√©pendances Python"""
    print("üì¶ **INSTALLATION DES D√âPENDANCES PYTHON**")
    print("-" * 50)
    
    # V√©rifier pip
    if not run_command("pip --version", "V√©rification de pip"):
        print("‚ùå pip n'est pas disponible")
        return False
        
    # Installer les d√©pendances vocales
    success = run_command(
        "pip install -r requirements_voice.txt",
        "Installation des d√©pendances vocales"
    )
    
    if success:
        print("‚úÖ Toutes les d√©pendances Python sont install√©es")
    else:
        print("‚ö†Ô∏è Certaines d√©pendances ont √©chou√© - La d√©mo fonctionnera en mode d√©grad√©")
        
    return success

def download_vosk_model():
    """T√©l√©charge le mod√®le Vosk fran√ßais"""
    print("\nüé§ **T√âL√âCHARGEMENT DU MOD√àLE VOSK FRAN√áAIS**")
    print("-" * 50)
    
    model_name = "vosk-model-small-fr-0.22"
    model_zip = f"{model_name}.zip"
    model_url = f"https://alphacephei.com/vosk/models/{model_zip}"
    
    # V√©rifier si le mod√®le existe d√©j√†
    if os.path.exists(model_name):
        print(f"‚úÖ Mod√®le {model_name} d√©j√† pr√©sent")
        return True
        
    print(f"üì• T√©l√©chargement depuis: {model_url}")
    print("‚è≥ Cela peut prendre quelques minutes (‚âà 40 MB)...")
    
    try:
        # T√©l√©charger le fichier
        urllib.request.urlretrieve(model_url, model_zip)
        print(f"‚úÖ T√©l√©chargement de {model_zip} termin√©")
        
        # D√©compresser
        print("üìÇ D√©compression du mod√®le...")
        with zipfile.ZipFile(model_zip, 'r') as zip_ref:
            zip_ref.extractall()
            
        # Nettoyer le fichier zip
        os.remove(model_zip)
        print(f"‚úÖ Mod√®le {model_name} install√© et pr√™t")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
        print("üí° Vous pouvez t√©l√©charger manuellement depuis:")
        print(f"   {model_url}")
        return False

def verify_installation():
    """V√©rifie que l'installation est compl√®te"""
    print("\nüîç **V√âRIFICATION DE L'INSTALLATION**")
    print("-" * 50)
    
    # V√©rifier les modules Python
    modules_to_check = [
        ('sounddevice', 'Capture audio'),
        ('vosk', 'Reconnaissance vocale'),
        ('pygame', 'Lecture audio'),
        ('yaml', 'Configuration'),
        ('google.cloud.texttospeech', 'Google TTS'),
    ]
    
    python_ok = True
    for module, description in modules_to_check:
        try:
            if '.' in module:
                # Import avec sous-modules
                parts = module.split('.')
                imported = __import__(parts[0])
                for part in parts[1:]:
                    imported = getattr(imported, part)
            else:
                __import__(module)
            print(f"‚úÖ {module}: {description}")
        except ImportError:
            print(f"‚ùå {module}: {description}")
            python_ok = False
            
    # V√©rifier le mod√®le Vosk
    model_ok = os.path.exists("vosk-model-small-fr-0.22")
    if model_ok:
        print("‚úÖ vosk-model-small-fr-0.22: Mod√®le de reconnaissance fran√ßais")
    else:
        print("‚ùå vosk-model-small-fr-0.22: Mod√®le de reconnaissance fran√ßais")
        
    print()
    if python_ok and model_ok:
        print("üéâ **INSTALLATION COMPL√àTE ET FONCTIONNELLE**")
        print("‚úÖ GuardianNav Conversation Vocale est pr√™t √† l'emploi !")
        return True
    else:
        print("‚ö†Ô∏è **INSTALLATION PARTIELLE**")
        if not python_ok:
            print("‚ùå Certaines d√©pendances Python manquent")
        if not model_ok:
            print("‚ùå Le mod√®le de reconnaissance vocale manque")
        print("üí° La d√©mo fonctionnera en mode d√©grad√©")
        return False

def show_next_steps(installation_complete):
    """Affiche les prochaines √©tapes"""
    print("\nüöÄ **PROCHAINES √âTAPES**")
    print("=" * 50)
    
    if installation_complete:
        print("üéØ **CONFIGURATION DES APIS (OPTIONNEL):**")
        print("   1. Copiez api_keys_template.yaml vers api_keys.yaml")
        print("   2. Remplissez vos cl√©s Google Cloud (Vertex AI, TTS)")
        print("   3. Activez les APIs dans Google Cloud Console")
        print()
        
    print("üéôÔ∏è **LANCER LA CONVERSATION VOCALE:**")
    print("   python demo_voice_conversation.py")
    print()
    
    print("üîß **TESTS INDIVIDUELS:**")
    print("   python -m guardian.voice_conversation_agent")
    print("   python tests/test_speech_agent.py")
    print()
    
    if not installation_complete:
        print("‚ö†Ô∏è **EN CAS DE PROBL√àME:**")
        print("   ‚Ä¢ V√©rifiez votre connexion internet")
        print("   ‚Ä¢ R√©installez avec: pip install --upgrade -r requirements_voice.txt")
        print("   ‚Ä¢ T√©l√©chargez manuellement le mod√®le Vosk si n√©cessaire")
        print()

def main():
    """Installation automatique compl√®te"""
    print("üõ†Ô∏è INSTALLATION GUARDIANNAV CONVERSATION VOCALE")
    print("=" * 60)
    print("üéôÔ∏è Installation des d√©pendances et du mod√®le fran√ßais")
    print("=" * 60)
    print()
    
    # V√©rifications pr√©alables
    print(f"üêç Python version: {sys.version}")
    print(f"üìÇ R√©pertoire de travail: {os.getcwd()}")
    print()
    
    # Demander confirmation
    response = input("üöÄ Continuer l'installation automatique ? (Entr√©e pour oui, 'n' pour non): ")
    if response.lower().strip() in ['n', 'non', 'no']:
        print("‚ùå Installation annul√©e")
        return
        
    print()
    
    # √âtapes d'installation
    steps_completed = 0
    
    # 1. D√©pendances Python
    if install_python_dependencies():
        steps_completed += 1
        
    # 2. Mod√®le Vosk
    if download_vosk_model():
        steps_completed += 1
        
    # 3. V√©rification
    installation_complete = verify_installation()
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä **R√âSUM√â DE L'INSTALLATION**")
    print(f"‚úÖ √âtapes r√©ussies: {steps_completed}/2")
    
    if installation_complete:
        print("üéâ Installation compl√®te et fonctionnelle !")
    else:
        print("‚ö†Ô∏è Installation partielle - Mode d√©grad√© disponible")
        
    # Prochaines √©tapes
    show_next_steps(installation_complete)
    
    print("üôè **Merci d'avoir install√© GuardianNav Conversation Vocale !**")

if __name__ == "__main__":
    main()