#!/usr/bin/env python3
"""
D√âMO GUARDIAN - AGENT LIVE AVEC VRAIE RECONNAISSANCE VOCALE
D√©monstration interactive avec speech-to-text r√©el (Vosk) + IA Gemini
Personnalisation compl√®te : pr√©nom, nom, num√©ro + sc√©nario d'urgence r√©aliste
"""

import sys
import os
import yaml
import json
import time
import requests
import math
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def calculate_distance(lat1, lon1, lat2, lon2):
    """Calcule la distance en m√®tres entre deux points g√©ographiques (formule haversine)"""
    # Rayon de la Terre en kilom√®tres
    R = 6371.0
    
    # Conversion en radians
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)
    
    # Diff√©rences
    dlat = lat2_rad - lat1_rad
    dlon = lon2_rad - lon1_rad
    
    # Formule haversine
    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    
    # Distance en kilom√®tres, puis conversion en m√®tres
    distance_km = R * c
    distance_m = distance_km * 1000
    
    return round(distance_m)

def format_distance(distance_meters):
    """Formate la distance pour l'affichage"""
    if distance_meters < 1000:
        return f"{distance_meters}m"
    else:
        distance_km = distance_meters / 1000
        return f"{distance_km:.1f}km"

try:
    import vosk
    import sounddevice as sd
    import queue
    VOICE_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Erreur import vocal: {e}")
    VOICE_AVAILABLE = False

try:
    import pygame
    TTS_AVAILABLE = True
except ImportError:
    TTS_AVAILABLE = False

class VoiceRecognizer:
    """Gestionnaire de reconnaissance vocale avec Vosk"""
    
    def __init__(self, model_path="vosk-model-small-fr-0.22"):
        self.model_path = model_path
        self.model = None
        self.rec = None
        self.audio_queue = queue.Queue()
        self.is_listening = False
        
    def initialize(self):
        """Initialise le mod√®le Vosk"""
        try:
            if not os.path.exists(self.model_path):
                print(f"‚ùå Mod√®le Vosk non trouv√©: {self.model_path}")
                return False
                
            print("üîß Chargement du mod√®le Vosk fran√ßais...")
            self.model = vosk.Model(self.model_path)
            self.rec = vosk.KaldiRecognizer(self.model, 16000)
            print("‚úÖ Mod√®le Vosk charg√© avec succ√®s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur initialisation Vosk: {e}")
            return False
    
    def audio_callback(self, indata, frames, time, status):
        """Callback pour capturer l'audio"""
        if status:
            print(f"‚ö†Ô∏è Audio status: {status}")
        self.audio_queue.put(bytes(indata))
    
    def listen_for_speech(self, timeout=30, stop_words=['stop', 'arr√™t', 'arr√™te']):
        """√âcoute et reconna√Æt la parole"""
        if not self.model:
            return None
            
        try:
            print(f"üé§ **√âCOUTE ACTIV√âE** (timeout: {timeout}s)")
            print("üó£Ô∏è Parlez maintenant... (dites 'stop' pour terminer)")
            print("-" * 50)
            
            self.is_listening = True
            recognized_text = ""
            
            with sd.RawInputStream(samplerate=16000, blocksize=8000, device=None, 
                                   dtype='int16', channels=1, callback=self.audio_callback):
                
                start_time = time.time()
                
                while self.is_listening and (time.time() - start_time) < timeout:
                    try:
                        data = self.audio_queue.get(timeout=1)
                        
                        if self.rec.AcceptWaveform(data):
                            # Phrase compl√®te reconnue
                            result = json.loads(self.rec.Result())
                            text = result.get('text', '').strip()
                            
                            if text:
                                print(f"üó£Ô∏è **RECONNU:** '{text}'")
                                recognized_text = text
                                
                                # V√©rifier les mots d'arr√™t
                                if any(stop_word in text.lower() for stop_word in stop_words):
                                    print("üõë Mot d'arr√™t d√©tect√©")
                                    break
                                else:
                                    # Phrase reconnue, on peut s'arr√™ter
                                    break
                        else:
                            # Reconnaissance partielle
                            partial = json.loads(self.rec.PartialResult())
                            partial_text = partial.get('partial', '').strip()
                            if partial_text:
                                print(f"üéß [En cours...]: {partial_text}", end='\r')
                                
                    except queue.Empty:
                        continue
                    except Exception as e:
                        print(f"‚ùå Erreur reconnaissance: {e}")
                        break
            
            self.is_listening = False
            print(f"\n‚úÖ Reconnaissance termin√©e: '{recognized_text}'")
            return recognized_text if recognized_text else None
            
        except Exception as e:
            print(f"‚ùå Erreur √©coute: {e}")
            self.is_listening = False
            return None

def load_guardian_agent():
    """Charge l'agent Guardian avec configuration et diagnostics"""
    try:
        # Charger la configuration
        print("üìÅ Chargement de api_keys.yaml...")
        with open('api_keys.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # V√©rifier la configuration Gemini
        google_config = config.get('google_cloud', {})
        gemini_config = google_config.get('gemini', {})
        
        print(f"üîç Configuration Gemini trouv√©e")
        print(f"   - Service: {'‚úÖ Activ√©' if gemini_config.get('enabled', False) else '‚ùå D√©sactiv√©'}")
        print(f"   - Authentification: {'‚úÖ Configur√©e' if bool(gemini_config.get('api_key')) else '‚ùå Manquante'}")
        print(f"   - Mod√®le: {gemini_config.get('model', 'non sp√©cifi√©')}")
        
        # Importer et initialiser l'agent
        from guardian.gemini_agent import VertexAIAgent
        from guardian.gmail_emergency_agent import GmailEmergencyAgent
        
        agent = VertexAIAgent(config)
        gmail_agent = GmailEmergencyAgent(config)
        
        # Ajouter l'agent Gmail √† l'agent principal pour la d√©mo
        agent.gmail_agent = gmail_agent
        
        # Ajouter m√©thode d'envoi d'email pour la d√©mo
        def send_emergency_email_alert(user_phone=None, real_location=None, real_situation=None, user_fullname="Utilisateur Inconnu"):
            """M√©thode d'envoi d'email d'urgence pour la d√©mo avec informations r√©elles"""
            if not gmail_agent.is_available:
                return False
            
            try:
                # Coordonn√©es exactes : 8 rue de Londres, 75009 Paris (Google France)
                demo_location = (48.8756, 2.3264)  # Coordonn√©es pr√©cises de Google France
                
                # Utiliser la vraie localisation ou celle par d√©faut
                location_text = real_location or "8 rue de Londres, 75009 Paris (bureaux Google France)"
                
                # Utiliser la vraie situation rapport√©e ou celle par d√©faut  
                situation_text = real_situation or "Situation d'urgence d√©tect√©e par l'IA Guardian"
                
                # Obtenir les contacts d'urgence de la config
                emergency_contacts = config.get('emergency_contacts', [
                    {"email": "demo@example.com", "name": "Contact Demo"}
                ])
                
                # Envoyer aux contacts d'urgence
                success_count = 0
                for contact in emergency_contacts:
                    try:
                        subject, html_body, text_body = gmail_agent.create_emergency_email(
                            recipient_email=contact.get("email"),
                            user_name=user_fullname,
                            location=location_text,
                            situation=situation_text,
                            location_coords=demo_location,
                            emergency_type="üö® Alerte Guardian - Situation d'urgence",
                            urgency_level="√©lev√©e",
                            user_phone=user_phone
                        )
                        
                        result = gmail_agent.send_email(contact.get("email"), subject, html_body, text_body)
                        if result.get("success"):
                            success_count += 1
                            
                    except Exception as e:
                        print(f"‚ùå Erreur envoi √† {contact.get('name')}: {e}")
                        
                return success_count > 0
                
            except Exception as e:
                print(f"‚ùå Erreur g√©n√©rale envoi email: {e}")
                return False
        
        # Attacher la m√©thode √† l'agent
        agent.send_emergency_email_alert = send_emergency_email_alert
        
        print(f"ü§ñ Agent Guardian:")
        print(f"   - IA: {'‚úÖ Disponible' if agent.is_available else '‚ö†Ô∏è Mode simulation'}")
        print(f"   - Gmail: {'‚úÖ Configur√©' if gmail_agent.is_available else '‚ùå Non configur√©'}")
        print(f"   - Pr√™t: {'‚úÖ Op√©rationnel' if agent.api_key and agent.api_key != 'YOUR_VERTEX_AI_API_KEY' else '‚ùå Non configur√©'}")
        
        return agent, gmail_agent, True
        
    except FileNotFoundError:
        print("‚ùå Fichier api_keys.yaml non trouv√©")
        return None, False
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur chargement agent: {e}")
        return None, False

def get_safe_route_directions(config, origin, destination):
    """Obtient un itin√©raire s√©curis√© avec l'API Google Directions"""
    try:
        # R√©cup√©rer la cl√© API Maps (utilis√©e aussi pour Directions)
        services = config.get('google_cloud', {}).get('services', {})
        maps_key = services.get('maps_api_key')
        
        if not maps_key or maps_key.startswith("YOUR_"):
            return "‚ö†Ô∏è API Maps non configur√©e - impossible de calculer l'itin√©raire"
        
        print(f"üîë Utilisation de la cl√© Maps API: {maps_key[:20]}...")
        
        # URL de l'API Google Directions
        directions_url = "https://maps.googleapis.com/maps/api/directions/json"
        
        # Param√®tres pour privil√©gier la s√©curit√©
        params = {
            'origin': origin,
            'destination': destination,
            'mode': 'walking',  # Mode pi√©ton
            'avoid': 'indoor',  # √âviter les passages souterrains
            'region': 'fr',     # France
            'language': 'fr',   # Fran√ßais
            'key': maps_key
        }
        
        print("üó∫Ô∏è [Calcul d'itin√©raire s√©curis√© avec Google Directions API...]")
        response = requests.get(directions_url, params=params, timeout=10)
        print(f"üì° R√©ponse API: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            if data['status'] == 'OK' and data['routes']:
                route = data['routes'][0]
                leg = route['legs'][0]
                print("‚úÖ Itin√©raire trouv√© avec succ√®s")
                
                # Extraire les informations importantes
                duration = leg['duration']['text']
                distance = leg['distance']['text']
                start_address = leg['start_address']
                end_address = leg['end_address']
                
                # Extraire les √©tapes principales
                steps = []
                for step in leg['steps'][:5]:  # Premi√®res 5 √©tapes
                    instruction = step['html_instructions']
                    # Nettoyer les balises HTML basiques
                    instruction = instruction.replace('<b>', '').replace('</b>', '')
                    instruction = instruction.replace('<div>', ' - ').replace('</div>', '')
                    steps.append(f"‚Ä¢ {instruction}")
                
                route_info = {
                    'duration': duration,
                    'distance': distance,
                    'start_address': start_address,
                    'end_address': end_address,
                    'steps': steps[:3]  # 3 premi√®res √©tapes seulement
                }
                
                return route_info
            else:
                error_msg = data.get('status', 'Erreur inconnue')
                if error_msg == 'REQUEST_DENIED':
                    return "‚ùå Acc√®s refus√© √† l'API Directions. V√©rifiez que l'API Directions est activ√©e dans Google Cloud Console."
                elif error_msg == 'OVER_QUERY_LIMIT':
                    return "‚ùå Quota API d√©pass√© pour aujourd'hui."
                else:
                    return f"‚ùå Impossible de calculer l'itin√©raire: {error_msg}"
        else:
            return f"‚ùå Erreur API Directions: {response.status_code}"
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du calcul d'itin√©raire: {e}")
        return "‚ùå Erreur lors du calcul de l'itin√©raire"

def get_nearby_safe_places(config, location, place_types=['hospital', 'police', 'pharmacy', 'gas_station']):
    """Trouve des lieux s√©curis√©s √† proximit√© avec l'API Google Places"""
    try:
        # R√©cup√©rer la cl√© API Places
        services = config.get('google_cloud', {}).get('services', {})
        places_key = services.get('places_api_key')
        
        if not places_key or places_key.startswith("YOUR_"):
            return "‚ö†Ô∏è API Places non configur√©e - impossible de trouver des lieux s√©curis√©s"
        
        print(f"üîç Recherche de lieux s√©curis√©s √† proximit√©...")
        
        # URL de l'API Google Places - Nearby Search
        places_url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
        
        safe_places = []
        
        # Rechercher diff√©rents types de lieux s√©curis√©s
        for place_type in place_types:
            params = {
                'location': location,
                'radius': 1000,  # 1km de rayon
                'type': place_type,
                'language': 'fr',
                'key': places_key
            }
            
            response = requests.get(places_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data['status'] == 'OK':
                    # Prendre les 2 premiers r√©sultats par type
                    for place in data.get('results', [])[:2]:
                        if place.get('business_status') == 'OPERATIONAL':
                            # R√©cup√©rer les coordonn√©es du lieu
                            geometry = place.get('geometry', {})
                            location_coords = geometry.get('location', {})
                            
                            place_info = {
                                'name': place.get('name'),
                                'type': place_type,
                                'rating': place.get('rating', 'N/A'),
                                'vicinity': place.get('vicinity'),
                                'open_now': place.get('opening_hours', {}).get('open_now', 'Inconnu'),
                                'lat': location_coords.get('lat'),
                                'lng': location_coords.get('lng')
                            }
                            safe_places.append(place_info)
        
        if safe_places:
            print(f"‚úÖ {len(safe_places)} lieux s√©curis√©s trouv√©s")
            return safe_places
        else:
            return "‚ÑπÔ∏è Aucun lieu s√©curis√© trouv√© dans un rayon de 1km"
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la recherche de lieux: {e}")
        return f"‚ùå Erreur lors de la recherche de lieux s√©curis√©s: {e}"

def format_safe_places_response(places_info, user_lat=48.8756, user_lng=2.3264):
    """Formate la r√©ponse des lieux s√©curis√©s pour l'affichage avec distances"""
    if isinstance(places_info, str):
        return places_info
    
    if not places_info:
        return "‚ÑπÔ∏è Aucun lieu s√©curis√© trouv√© √† proximit√©"
    
    # Calculer les distances pour chaque lieu
    for place in places_info:
        if place.get('lat') and place.get('lng'):
            distance_m = calculate_distance(user_lat, user_lng, place['lat'], place['lng'])
            place['distance'] = distance_m
            place['distance_formatted'] = format_distance(distance_m)
        else:
            place['distance'] = float('inf')  # Tr√®s loin si pas de coordonn√©es
            place['distance_formatted'] = "N/A"
    
    # Organiser par type de lieu et trier par distance
    places_by_type = {}
    for place in places_info:
        place_type = place['type']
        if place_type not in places_by_type:
            places_by_type[place_type] = []
        places_by_type[place_type].append(place)
    
    # Trier chaque type par distance (plus proche d'abord)
    for place_type in places_by_type:
        places_by_type[place_type].sort(key=lambda x: x.get('distance', float('inf')))
    
    # Traduction des types
    type_translations = {
        'hospital': 'üè• **H√îPITAUX/URGENCES**',
        'police': 'üöî **COMMISSARIATS**', 
        'pharmacy': 'üíä **PHARMACIES**',
        'gas_station': '‚õΩ **STATIONS-SERVICE**',
        'bank': 'üè¶ **BANQUES/ATM**'
    }
    
    formatted_sections = []
    
    for place_type, places in places_by_type.items():
        type_title = type_translations.get(place_type, f"üìç **{place_type.upper()}**")
        formatted_sections.append(type_title)
        
        for place in places:
            open_status = ""
            if place['open_now'] == True:
                open_status = " üü¢ (Ouvert)"
            elif place['open_now'] == False:
                open_status = " üî¥ (Ferm√©)" 
                
            rating_str = f" ‚≠ê{place['rating']}" if place['rating'] != 'N/A' else ""
            distance_str = f" üìè {place['distance_formatted']}"
            
            formatted_sections.append(f"‚Ä¢ **{place['name']}**{rating_str}{open_status}{distance_str}")
            formatted_sections.append(f"  üìç {place['vicinity']}")
        
        formatted_sections.append("")  # Ligne vide entre les sections
    
    formatted = f"""üè™ **LIEUX S√âCURIS√âS √Ä PROXIMIT√â (tri√©s par distance):**

{chr(10).join(formatted_sections).rstrip()}

üí° **Dirigez-vous vers le lieu LE PLUS PROCHE qui est ouvert. Les h√¥pitaux et commissariats sont disponibles 24h/24.**
üö∂‚Äç‚ôÄÔ∏è **Distances calcul√©es √† pied depuis votre position actuelle.**"""
    
    return formatted

def format_route_response(route_info):
    """Formate la r√©ponse d'itin√©raire pour l'affichage"""
    if isinstance(route_info, str):
        return route_info
    
    formatted = f"""üó∫Ô∏è **ITIN√âRAIRE S√âCURIS√â CALCUL√â:**

üìç **D√©part:** Pr√®s de {route_info['start_address']}
üéØ **Destination:** {route_info['end_address']}
‚è±Ô∏è **Dur√©e estim√©e:** {route_info['duration']}
üìè **Distance:** {route_info['distance']}

üö∂‚Äç‚ôÄÔ∏è **PREMI√àRES √âTAPES:**
{chr(10).join(route_info['steps'])}

üí° **Cet itin√©raire privil√©gie les rues principales et √©clair√©es pour votre s√©curit√©.**"""
    
    return formatted

def simulate_tts_response(text):
    """Simule la synth√®se vocale"""
    print("\nüîä **GUARDIAN R√âPOND:**")
    print("="*60)
    print(f"{text}")
    print("="*60)
    print()

def analyze_situation_with_ai(agent, situation_text):
    """Analyse la situation avec l'IA Gemini - VRAIE API SEULEMENT"""
    if not agent:
        print("‚ùå Agent non disponible")
        return "**ERREUR** : Agent Guardian non initialis√© correctement"
    
    # V√©rifier que l'agent est correctement configur√©
    if not hasattr(agent, 'api_key') or not agent.api_key or agent.api_key == "YOUR_VERTEX_AI_API_KEY":
        print("‚ùå Cl√© API Gemini manquante ou invalide")
        print("üí° V√©rifiez votre fichier api_keys.yaml")
        return "**ERREUR** : Cl√© API Gemini non configur√©e. V√©rifiez api_keys.yaml"
    
    print(f"üß† [Analyse IA Gemini en cours...]")
    print(f"ü§ñ Service: {agent.api_type.upper()}")
    print(f"üéØ Mod√®le: {agent.model_name}")
    
    try:
        response = agent._make_api_request(situation_text)
        
        if response and 'candidates' in response:
            ai_text = response['candidates'][0]['content']['parts'][0]['text']
            
            # V√©rifier que ce n'est pas une r√©ponse simul√©e
            if 'simulation' in ai_text.lower() or '**ANALYSE D\'URGENCE - NIVEAU' in ai_text:
                print("‚ö†Ô∏è R√©ponse simul√©e d√©tect√©e - probl√®me avec l'API")
                print("üí° L'API Gemini n'est pas accessible avec cette cl√©")
                return f"**ERREUR API** : {ai_text}\n\n**NOTE**: L'API Gemini ne fonctionne pas correctement"
            
            print("‚úÖ R√©ponse R√âELLE de l'IA Gemini re√ßue")
            return ai_text
        else:
            print("‚ùå Pas de r√©ponse valide de l'API Gemini")
            return "**ERREUR API** : L'API Gemini n'a pas retourn√© de r√©ponse valide"
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'appel √† l'API Gemini: {e}")
        return f"**ERREUR API** : Impossible de joindre l'API Gemini - {e}"

def display_scenario_intro():
    """Affiche l'introduction du sc√©nario"""
    print("üé≠ D√âMO GUARDIAN - AGENT LIVE (RECONNAISSANCE VOCALE)")
    print("="*70)
    print("üë§ **UTILISATEUR :** Personnalisable")
    print("üìç **LOCALISATION :** 8 rue de Londres, 75009 Paris (bureaux Google France)")  
    print("üïô **HEURE :** 22h00")
    print("üìÖ **DATE :** Vendredi 31 octobre 2025")
    print("="*70)
    print()
    
    print("üéØ **CONTEXTE DU SC√âNARIO:**")
    print("Vous √™tes dans une situation d'urgence, il est tard le soir, vous √™tes pr√®s")
    print("des bureaux Google France (8 rue de Londres, 9√®me arrondissement).")
    print("Le quartier Europe/Saint-Lazare se vide apr√®s les heures de bureau.")
    print("Vous devez vous rendre Place de la Concorde, mais vous avez")
    print("l'impression d'√™tre suivie et vous commencez √† avoir peur.")
    print("Vous d√©cidez d'activer Guardian pour obtenir de l'aide.")
    print()
    
    print("üéôÔ∏è **VRAIE RECONNAISSANCE VOCALE:**")
    print("‚Ä¢ Parlez dans votre microphone pour interagir avec Guardianüé§")
    print("‚Ä¢ Dites 'stop' ou 'arr√™t' pour terminer une √©coute")
    print()

def run_live_agent_demo():
    """Lance la d√©monstration de l'agent live avec vraie reconnaissance vocale"""
    
    # Introduction
    display_scenario_intro()
    
    # Demande du pr√©nom et nom
    print("\nÔøΩ **CONFIGURATION PERSONNELLE**")
    print("="*50)
    print("Pour une d√©monstration personnalis√©e, veuillez saisir les informations de l'utilisateur:")
    print()
    
    # Saisie du pr√©nom
    user_firstname = input("üìù Pr√©nom de l'utilisateur (ou appuyez sur Entr√©e pour 'Alex'): ").strip()
    if not user_firstname:
        user_firstname = "Alex"
        print(f"‚úÖ Pr√©nom par d√©faut: {user_firstname}")
    else:
        print(f"‚úÖ Pr√©nom configur√©: {user_firstname}")
    
    # Saisie du nom
    user_lastname = input("üìù Nom de famille de l'utilisateur (ou appuyez sur Entr√©e pour 'Dupont'): ").strip()
    if not user_lastname:
        user_lastname = "Dupont"
        print(f"‚úÖ Nom par d√©faut: {user_lastname}")
    else:
        print(f"‚úÖ Nom configur√©: {user_lastname}")
    
    user_fullname = f"{user_firstname} {user_lastname}"
    print(f"üë§ **Utilisateur configur√©:** {user_fullname}")
    print()
    
    print("üì± **NUM√âRO DE T√âL√âPHONE**")
    print("Pour les liens WhatsApp d'urgence, veuillez saisir le num√©ro de t√©l√©phone:")
    print()
    
    # Saisie du num√©ro avec validation
    user_phone = None
    while True:
        phone_input = input(f"üìû Num√©ro de {user_firstname} (format: +33612345678): ").strip()
        
        if not phone_input:
            print("‚ö†Ô∏è Pas de num√©ro saisi - les liens WhatsApp utiliseront le num√©ro par d√©faut")
            user_phone = "+33634129517"  # Num√©ro par d√©faut de la config
            break
        
        # Validation basique du format
        if phone_input.startswith(('+33', '0')) and len(phone_input.replace('+', '').replace(' ', '').replace('-', '')) >= 10:
            # Nettoyer et formater le num√©ro
            clean_phone = phone_input.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            if clean_phone.startswith('0'):
                clean_phone = '+33' + clean_phone[1:]
            elif not clean_phone.startswith('+'):
                clean_phone = '+' + clean_phone
            
            user_phone = clean_phone
            print(f"‚úÖ Num√©ro configur√©: {user_phone}")
            break
        else:
            print("‚ùå Format invalide. Utilisez +33612345678 ou 0612345678")
            retry = input("R√©essayer ? (o/N): ").lower()
            if retry != 'o':
                user_phone = "+33634129517"  # Num√©ro par d√©faut
                print("‚ö†Ô∏è Utilisation du num√©ro par d√©faut pour la d√©mo")
                break
    
    # V√©rification des pr√©requis
    if not VOICE_AVAILABLE:
        print("\n‚ùå Modules de reconnaissance vocale non disponibles")
        print("üí° Installez avec: pip3 install vosk sounddevice")
        return
    
    input("\nüöÄ Appuyez sur Entr√©e pour commencer la d√©mo avec reconnaissance vocale...")
    print()
    
    # Initialisation de la reconnaissance vocale
    print("üé§ **INITIALISATION RECONNAISSANCE VOCALE**")
    print("="*50)
    recognizer = VoiceRecognizer()
    
    if not recognizer.initialize():
        print("‚ùå Impossible d'initialiser la reconnaissance vocale")
        print("üí° V√©rifiez que le mod√®le vosk-model-small-fr-0.22 est pr√©sent")
        return
    
    # Chargement de l'agent
    print("\nüîß **INITIALISATION DE GUARDIAN**")
    print("="*40)
    agent, gmail_agent, agent_loaded = load_guardian_agent()
    
    if agent_loaded:
        print("‚úÖ Agent Guardian charg√© avec succ√®s")
        print(f"ü§ñ IA Gemini: {'‚úÖ Disponible' if agent.is_available else '‚ö†Ô∏è Mode simulation'}")
        
        # Test de connectivit√© API
        if agent.is_available:
            print("üîß V√©rification de la connectivit√© IA...")
            test_response = analyze_situation_with_ai(agent, "Test de connexion. R√©pondez juste 'API OK'.")
            if "API OK" in test_response or "ok" in test_response.lower():
                print("‚úÖ IA Gemini op√©rationnelle")
            else:
                print("‚ö†Ô∏è Test IA √©chou√© - v√©rifiez votre configuration")
                print(f"R√©ponse: {test_response[:50]}...")
        else:
            print("‚ùå ATTENTION: L'agent n'est pas disponible")
            print("üí° La d√©mo utilisera des messages d'erreur au lieu de l'IA")
            
            choice = input("\n‚ùì Continuer quand m√™me ? (o/N): ").lower()
            if choice != 'o':
                print("üõë D√©mo annul√©e - Configurez d'abord votre API Gemini")
                return
    else:
        print("‚ö†Ô∏è Agent en mode simulation")
        print("‚ùå ERREUR: Impossible de charger l'agent Guardian")
        return
    
    print()
    
    # D√©but de la conversation
    print("üéôÔ∏è **D√âBUT DE LA CONVERSATION VOCALE**")
    print("="*45)
    
    # Message d'accueil Guardian
    welcome_msg = f"""Bonjour {user_firstname}. Je suis Guardian, votre assistant de s√©curit√© personnel. 
Je d√©tecte que vous m'activez √† une heure tardive pr√®s des bureaux Google France. 
Je vois que vous souhaitez vous rendre Place de la Concorde. √ätes-vous en s√©curit√© ? 
D√©crivez-moi votre situation actuelle en parlant dans votre microphone."""
    
    simulate_tts_response(welcome_msg)
    
    # Premi√®re interaction - L'utilisateur explique sa situation avec sa voix
    print(f"üé§ **√Ä VOUS DE PARLER, {user_firstname.upper()}...**")
    situation_vocale = recognizer.listen_for_speech(timeout=20)
    
    if not situation_vocale:
        print("‚ö†Ô∏è Aucune parole d√©tect√©e, utilisation du sc√©nario par d√©faut")
        situation_vocale = "Je suis pr√®s des bureaux Google France, 8 rue de Londres dans le 9√®me. Il est 22h, je dois aller Place de la Concorde mais j'ai l'impression qu'on me suit. Il y a quelqu'un derri√®re moi depuis plusieurs rues et √ßa me fait peur. Le quartier se vide, je ne sais pas quoi faire."
    
    print(f"\nüìù **SITUATION RAPPORT√âE:** {situation_vocale}")
    
    # Construction du prompt contextualis√© et optimis√© pour Gemini
    full_prompt = f"""Tu es Guardian, un assistant IA sp√©cialis√© en s√©curit√© personnelle. Une personne nomm√©e {user_fullname} t'appelle √† l'aide.

CONTEXTE DE LA SITUATION:
‚Ä¢ Personne: {user_fullname}
‚Ä¢ Moment: 22h00, vendredi 31 octobre 2025 (heure tardive)
‚Ä¢ Lieu: 8 rue de Londres, 75009 Paris (pr√®s des bureaux Google France, quartier Europe/Saint-Lazare)
‚Ä¢ Destination souhait√©e: Place de la Concorde
‚Ä¢ Situation: "{situation_vocale}"

MISSION: Analyse cette situation d'urgence et r√©ponds directement √† {user_firstname} de mani√®re professionnelle, rassurante mais ferme.

CAPACIT√âS DISPONIBLES: 
- Si tu juges qu'un itin√©raire s√©curis√© est n√©cessaire, inclus "DEMANDE_ITINERAIRE_SECURISE" dans ta r√©ponse
- Si tu veux proposer des lieux s√©curis√©s √† proximit√© (h√¥pitaux, commissariats, pharmacies), inclus "DEMANDE_LIEUX_SECURISES" dans ta r√©ponse
- Si tu estimes que la situation pr√©sente un DANGER R√âEL qui n√©cessite d'alerter imm√©diatement les proches (ex: poursuivie, harcel√©e, menac√©e, bless√©e, perdue, agression, accident), inclus "DEMANDE_ENVOI_EMAIL_URGENCE" dans ta r√©ponse

D√âCISION D'ALERTE AUX PROCHES: Tu dois d√©cider intelligemment d'alerter les proches quand:
‚Ä¢ La personne est en danger imm√©diat (suivie, menac√©e, agress√©e)
‚Ä¢ Elle est dans une situation potentiellement grave (perdue la nuit, bless√©e, harcel√©e)
‚Ä¢ Sa s√©curit√© physique est compromise
‚Ä¢ Elle a besoin d'aide urgente et pourrait ne plus pouvoir communiquer
NE PAS alerter pour: stress l√©ger, demande d'informations, situations non dangereuses

FORMAT DE R√âPONSE (en fran√ßais):
**NIVEAU D'URGENCE:** [1-10]/10

**ANALYSE DE LA SITUATION:**
[Analyse claire en 2-3 phrases]

**ACTIONS IMM√âDIATES:**
1. [Action prioritaire n¬∞1]
2. [Action prioritaire n¬∞2] 
3. [Action prioritaire n¬∞3]

**CONSEILS DE S√âCURIT√â:**
‚Ä¢ [Conseil pratique imm√©diat]
‚Ä¢ [Conseil de d√©placement - M√©tro Saint-Lazare proche, rues principales √©clair√©es]
‚Ä¢ [Conseil de communication]

**LIEUX S√âCURIS√âS √Ä PROXIMIT√â:**
Si la situation l'exige, demande des lieux s√©curis√©s avec DEMANDE_LIEUX_SECURISES

**NUM√âROS D'URGENCE:**
[Num√©ro appropri√© √† la situation]

**MESSAGE PERSONNEL:**
{user_firstname}, [message rassurant et encourageant personnalis√©]

R√©ponds uniquement dans ce format. Sois pr√©cise, empathique et professionnelle."""
    
    # Analyse IA
    print("\nüß† **ANALYSE INTELLIGENTE GUARDIAN**")
    print("="*45)
    ai_response = analyze_situation_with_ai(agent, full_prompt)
    
    # Charger la configuration une seule fois
    config = yaml.safe_load(open('api_keys.yaml', 'r', encoding='utf-8'))
    
    # NOUVELLE FONCTIONNALIT√â: L'agent d√©cide intelligemment d'alerter les proches
    def extract_urgency_level(response):
        """Extrait le niveau d'urgence de la r√©ponse IA (format: **NIVEAU D'URGENCE:** X/10)"""
        import re
        match = re.search(r'\*\*NIVEAU D\'URGENCE:\*\*\s*(\d+)/10', response)
        if match:
            return int(match.group(1))
        return 0
    
    # Afficher le niveau d'urgence d√©tect√©
    urgency_level = extract_urgency_level(ai_response)
    print(f"üö® **NIVEAU D'URGENCE D√âTECT√â:** {urgency_level}/10")
    
    # L'agent d√©cide intelligemment s'il faut alerter les proches
    agent_wants_email = "DEMANDE_ENVOI_EMAIL_URGENCE" in ai_response
    if agent_wants_email:
        print(f"ü§ñ **L'AGENT GUARDIAN D√âCIDE D'ALERTER LES PROCHES**")
        print(f"   ‚Üí Situation √©valu√©e comme n√©cessitant une intervention des contacts d'urgence")
    
    # V√©rifier si l'IA demande un itin√©raire s√©curis√©
    if "DEMANDE_ITINERAIRE_SECURISE" in ai_response:
        print("üó∫Ô∏è L'IA recommande un itin√©raire s√©curis√© - calcul en cours...")
        
        route_info = get_safe_route_directions(
            config, 
            "8 rue de Londres, 75009 Paris", 
            "Place de la Concorde, Paris"
        )
        
        route_response = format_route_response(route_info)
        ai_response = ai_response.replace("DEMANDE_ITINERAIRE_SECURISE", route_response)
    
    # V√©rifier si l'IA demande des lieux s√©curis√©s
    if "DEMANDE_LIEUX_SECURISES" in ai_response:
        print("üè™ L'IA recommande des lieux s√©curis√©s - recherche en cours...")
        
        # Coordonn√©es approximatives de 8 rue de Londres, Paris
        location = "48.8756,2.3264"  # Latitude, Longitude
        
        places_info = get_nearby_safe_places(
            config, 
            location,
            ['hospital', 'police', 'pharmacy', 'gas_station']
        )
        
        # Coordonn√©es utilisateur (8 rue de Londres, Paris)
        user_coords = location.split(',')
        user_lat, user_lng = float(user_coords[0]), float(user_coords[1])
        
        places_response = format_safe_places_response(places_info, user_lat, user_lng)
        ai_response = ai_response.replace("DEMANDE_LIEUX_SECURISES", places_response)
    
    # Traitement intelligent de l'envoi d'email d√©cid√© par l'agent
    if "DEMANDE_ENVOI_EMAIL_URGENCE" in ai_response:
        if agent.gmail_agent and agent.gmail_agent.is_available:
            print("üö® **ENVOI D'EMAIL D'URGENCE D√âCID√â PAR L'AGENT...**")
            # Informations exactes pour l'email
            exact_location = "8 rue de Londres, 75009 Paris (bureaux Google France), pr√®s de la gare Saint-Lazare"
            success = agent.send_emergency_email_alert(
                user_phone=user_phone, 
                real_location=exact_location, 
                real_situation=situation_vocale,
                user_fullname=user_fullname
            )
            if success:
                email_response = "‚úÖ Email d'urgence envoy√© avec succ√®s aux contacts d'urgence."
            else:
                email_response = "‚ùå Erreur lors de l'envoi de l'email d'urgence. Veuillez contacter manuellement vos proches."
        else:
            email_response = "‚ö†Ô∏è Service d'email d'urgence non configur√©. Veuillez contacter manuellement vos proches."
        
        ai_response = ai_response.replace("DEMANDE_ENVOI_EMAIL_URGENCE", email_response)

    
    simulate_tts_response(ai_response)
    
    # Suivi de situation avec reconnaissance vocale
    print("üé§ **SUIVI VOCAL - COMMENT ALLEZ-VOUS MAINTENANT ?**")
    follow_up_vocal = recognizer.listen_for_speech(timeout=15)
    
    # R√©ponse de suivi
    if follow_up_vocal:
        print(f"\nüìù **MISE √Ä JOUR:** {follow_up_vocal}")
        
        follow_prompt = f"""Tu es Guardian. {user_fullname} te donne une mise √† jour sur sa situation de s√©curit√©.

RAPPEL DU CONTEXTE:
‚Ä¢ {user_fullname} √©tait pr√®s des bureaux Google France (8 rue de Londres, 75009 Paris) √† 22h, se sentait suivie
‚Ä¢ Quartier Europe/Saint-Lazare, zone qui se vide apr√®s les heures de bureau
‚Ä¢ Tu lui as d√©j√† donn√© des conseils de s√©curit√©
‚Ä¢ Cette personne vient de te r√©pondre par reconnaissance vocale

MISE √Ä JOUR DE {user_firstname.upper()}: "{follow_up_vocal}"

MISSION: R√©ponds √† cette mise √† jour de mani√®re professionnelle et bienveillante.

FORMAT DE R√âPONSE:
**√âVALUATION:** [Sa situation actuelle]

**PROCHAINES √âTAPES:**
‚Ä¢ [Action imm√©diate si n√©cessaire]
‚Ä¢ [Conseil pour la suite]
‚Ä¢ [Recommandation de s√©curit√©]

**MESSAGE:**
[Message personnel encourageant et rassurant adapt√© √† sa r√©ponse]

Si elle est en s√©curit√©: f√©licite-la et donne des conseils pour rentrer.
Si elle est encore en danger: renforce les mesures de s√©curit√©.
Reste concise, empathique et professionnelle."""
        
        follow_response = analyze_situation_with_ai(agent, follow_prompt)
        simulate_tts_response(follow_response)
    else:
        print("‚ö†Ô∏è Pas de r√©ponse vocale d√©tect√©e")
    
    # Conclusion
    print("\nüéØ **CONCLUSION DE LA D√âMO VOCALE**")
    print("="*40)
    print("‚úÖ D√©monstration vocale termin√©e avec succ√®s")
    print(f"üé≠ Sc√©nario {user_fullname} avec vraie reconnaissance vocale")
    print("ü§ñ Guardian + Vosk + Gemini IA")
    print()
    print("üí° **POINTS CL√âS D√âMONTR√âS:**")
    print("   ‚úÖ Reconnaissance vocale fran√ßaise (Vosk)")
    print("   ‚úÖ Analyse IA contextuelle (Gemini)")
    print("   ‚úÖ Conversation naturelle speech-to-text")
    print("   ‚úÖ Conseils de s√©curit√© personnalis√©s")
    print("   ‚úÖ Suivi en temps r√©el de la situation")
    print()
    print("üöÄ System complet op√©rationnel pour situations r√©elles !")

def main():
    """Point d'entr√©e principal"""
    try:
        run_live_agent_demo()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è D√©mo interrompue par l'utilisateur")
        print("üõ°Ô∏è En situation r√©elle, Guardian resterait disponible")
    except Exception as e:
        print(f"\n‚ùå Erreur durant la d√©mo: {e}")
        print("üí° En cas de vraie urgence, contactez directement le 17 ou le 112")

if __name__ == "__main__":
    main()