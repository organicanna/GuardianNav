#!/usr/bin/env python3
"""
üé§ T√©l√©chargeur Automatique du Mod√®le Vosk Fran√ßais
T√©l√©charge et installe automatiquement le mod√®le Vosk fran√ßais pour Guardian
"""

import os
import sys
import requests
import zipfile
from pathlib import Path
import shutil

# Configuration
VOSK_MODEL_URL = "https://alphacephei.com/vosk/models/vosk-model-small-fr-0.22.zip"
MODEL_NAME = "vosk-model-small-fr-0.22"
MODELS_DIR = Path("models")
DOWNLOAD_DIR = Path("temp_downloads")

def create_directories():
    """Cr√©er les dossiers n√©cessaires"""
    MODELS_DIR.mkdir(exist_ok=True)
    DOWNLOAD_DIR.mkdir(exist_ok=True)
    print(f"üìÅ Dossiers cr√©√©s: {MODELS_DIR}, {DOWNLOAD_DIR}")

def check_existing_model():
    """V√©rifier si le mod√®le existe d√©j√†"""
    model_path = MODELS_DIR / MODEL_NAME
    if model_path.exists() and model_path.is_dir():
        # V√©rifier que le mod√®le est complet
        required_files = ["am", "conf", "graph", "ivector"]
        if all((model_path / f).exists() for f in required_files):
            print(f"‚úÖ Mod√®le Vosk d√©j√† install√© : {model_path}")
            return True
    return False

def download_model():
    """T√©l√©charger le mod√®le Vosk"""
    zip_path = DOWNLOAD_DIR / f"{MODEL_NAME}.zip"
    
    print(f"üì• T√©l√©chargement du mod√®le Vosk fran√ßais...")
    print(f"üîó URL: {VOSK_MODEL_URL}")
    print(f"üìç Destination: {zip_path}")
    
    try:
        response = requests.get(VOSK_MODEL_URL, stream=True)
        response.raise_for_status()
        
        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        
        with open(zip_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    if total_size > 0:
                        progress = (downloaded / total_size) * 100
                        print(f"\rüìä Progression: {progress:.1f}% ({downloaded//1024//1024}MB/{total_size//1024//1024}MB)", end='')
        
        print(f"\n‚úÖ T√©l√©chargement termin√©: {zip_path}")
        return zip_path
        
    except Exception as e:
        print(f"‚ùå Erreur de t√©l√©chargement: {e}")
        return None

def extract_model(zip_path):
    """Extraire le mod√®le Vosk"""
    print(f"üì¶ Extraction du mod√®le...")
    
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(DOWNLOAD_DIR)
        
        # D√©placer vers le dossier models/
        extracted_path = DOWNLOAD_DIR / MODEL_NAME
        target_path = MODELS_DIR / MODEL_NAME
        
        if target_path.exists():
            shutil.rmtree(target_path)
        
        shutil.move(str(extracted_path), str(target_path))
        print(f"‚úÖ Mod√®le install√©: {target_path}")
        
        return target_path
        
    except Exception as e:
        print(f"‚ùå Erreur d'extraction: {e}")
        return None

def validate_model(model_path):
    """Valider l'installation du mod√®le"""
    required_files = [
        "am/final.mdl",
        "conf/mfcc.conf", 
        "conf/model.conf",
        "graph/HCLr.fst",
        "graph/Gr.fst",
        "ivector/final.ie"
    ]
    
    print(f"üîç Validation du mod√®le...")
    
    for file_path in required_files:
        full_path = model_path / file_path
        if not full_path.exists():
            print(f"‚ùå Fichier manquant: {file_path}")
            return False
        print(f"‚úÖ {file_path}")
    
    print(f"üéâ Mod√®le Vosk valid√© avec succ√®s!")
    return True

def cleanup():
    """Nettoyer les fichiers temporaires"""
    if DOWNLOAD_DIR.exists():
        shutil.rmtree(DOWNLOAD_DIR)
        print(f"üßπ Nettoyage termin√©: {DOWNLOAD_DIR} supprim√©")

def test_vosk_integration():
    """Tester l'int√©gration Vosk"""
    print(f"üß™ Test d'int√©gration Vosk...")
    
    try:
        import vosk
        model_path = MODELS_DIR / MODEL_NAME
        model = vosk.Model(str(model_path))
        rec = vosk.KaldiRecognizer(model, 16000)
        print(f"‚úÖ Vosk fonctionne correctement!")
        return True
        
    except ImportError:
        print(f"‚ö†Ô∏è Module vosk non install√©. Installer avec: pip install vosk")
        return False
    except Exception as e:
        print(f"‚ùå Erreur Vosk: {e}")
        return False

def main():
    """Fonction principale"""
    print("üé§ === INSTALLATION MOD√àLE VOSK FRAN√áAIS ===")
    print("Guardian - Assistant de S√©curit√© Personnelle")
    print("=" * 50)
    
    try:
        # 1. Cr√©er les dossiers
        create_directories()
        
        # 2. V√©rifier si d√©j√† install√©
        if check_existing_model():
            choice = input("R√©installer le mod√®le ? (y/N): ").lower()
            if choice not in ['y', 'yes', 'oui']:
                print("‚úÖ Installation annul√©e - Mod√®le d√©j√† pr√©sent")
                return test_vosk_integration()
        
        # 3. T√©l√©charger
        zip_path = download_model()
        if not zip_path:
            return False
        
        # 4. Extraire
        model_path = extract_model(zip_path)
        if not model_path:
            return False
        
        # 5. Valider
        if not validate_model(model_path):
            return False
        
        # 6. Nettoyer
        cleanup()
        
        # 7. Test final
        success = test_vosk_integration()
        
        if success:
            print("\nüéâ === INSTALLATION R√âUSSIE ===")
            print(f"üìç Mod√®le install√©: {model_path}")
            print(f"üöÄ Guardian est pr√™t √† utiliser la reconnaissance vocale!")
        
        return success
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Installation interrompue par l'utilisateur")
        cleanup()
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        cleanup()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)