#!/usr/bin/env python3
"""
GMAIL EMAIL AGENT - Envoi d'emails d'urgence via Gmail API
Int√©gr√© dans Guardian pour alerter les proches en cas de danger
Utilise des templates HTML int√©gr√©s et What3Words pour la localisation pr√©cise
"""

import os
import base64
import json
import urllib.parse
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import requests
from .what3words_service import What3WordsService


class GmailEmergencyAgent:
    """Agent d'envoi d'emails d'urgence via Gmail API"""
    
    def __init__(self, config):
        """Initialise l'agent Gmail avec la configuration"""
        self.config = config
        self.access_token = None
        self.is_available = False
        
        # G√©n√©rateur d'emails visuels retir√© - on utilise le template simple
        
        # Initialiser le service What3Words
        w3w_key = config.get('google_cloud', {}).get('services', {}).get('what3words_api_key', 'YOUR_WHAT3WORDS_API_KEY')
        self.what3words_service = What3WordsService(w3w_key)
        
        # Services de cartes supprim√©s - on utilise seulement les liens directs
        
        # Correction: Gmail est dans emergency.gmail, pas google_cloud.gmail
        self.gmail_config = config.get('emergency', {}).get('gmail', {})
        
        # V√©rifier la configuration Gmail
        if self.gmail_config.get('enabled', False):
            self.client_id = self.gmail_config.get('client_id')
            self.client_secret = self.gmail_config.get('client_secret')
            self.refresh_token = self.gmail_config.get('refresh_token')
            
            if all([self.client_id, self.client_secret, self.refresh_token]) and \
               self.refresh_token != "YOUR_REFRESH_TOKEN":
                self.is_available = True
                print("üìß Gmail API configur√© pour emails d'urgence")
            else:
                print("‚ö†Ô∏è Configuration Gmail incompl√®te ou tokens manquants")
        else:
            print("‚ùå Gmail API d√©sactiv√©")
    
    def refresh_access_token(self):
        """Actualise le token d'acc√®s OAuth2"""
        if not self.is_available:
            return False
            
        try:
            url = "https://oauth2.googleapis.com/token"
            data = {
                'client_id': self.client_id,
                'client_secret': self.client_secret,
                'refresh_token': self.refresh_token,
                'grant_type': 'refresh_token'
            }
            
            response = requests.post(url, data=data)
            response.raise_for_status()
            
            token_data = response.json()
            self.access_token = token_data.get('access_token')
            
            return bool(self.access_token)
            
        except Exception as e:
            print(f"‚ùå Erreur refresh token Gmail: {e}")
            return False
    
    def create_emergency_email(self, recipient_email, user_name, location, situation, emergency_contacts=None, 
                              emergency_type="üö® Situation d'urgence", urgency_level="√©lev√©e", 
                              location_coords=None, additional_info=None, user_phone=None):
        """Cr√©e un email d'urgence format√© avec EmergencyEmailGenerator"""
        
        current_time = datetime.now().strftime("%d/%m/%Y √† %H:%M")
        
        # Obtenir les informations What3Words si on a des coordonn√©es
        w3w_info = None
        if location_coords and isinstance(location_coords, (list, tuple)) and len(location_coords) >= 2:
            try:
                w3w_info = self.what3words_service.get_location_info(location_coords[0], location_coords[1])
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur What3Words: {e}")
                w3w_info = None
        
        # Sujet d'urgence
        subject = f"üì± Guardian - {user_name} a besoin d'assistance"
        
        # Obtenir le num√©ro de t√©l√©phone de la personne depuis la configuration ou param√®tre
        if not user_phone:
            emergency_config = self.config.get('emergency', {})
            user_info = emergency_config.get('user_info', {})
            user_phone = user_info.get('phone', '')
        
        # Utiliser le template unifi√© pour tous les emails
        html_body = self._create_simple_emergency_email(user_name, location, situation, current_time, location_coords, user_phone)
        
        # Les cartes sont retir√©es - on garde seulement les liens dans le texte
        
        # Cr√©er la section de localisation avec What3Words et carte
        location_section = f"üìç Localisation: {location}"
        
        if w3w_info:
            location_section += f"""

üó∫Ô∏è LOCALISATION PR√âCISE:
‚Ä¢ Adresse What3Words: {w3w_info['what3words']}
‚Ä¢ Coordonn√©es GPS: {w3w_info['coordinates']['latitude']}, {w3w_info['coordinates']['longitude']}
‚Ä¢ Pr√©cision: {w3w_info['coordinates']['precision']}
‚Ä¢ Lien What3Words: {w3w_info['what3words_url']}
‚Ä¢ Lien Google Maps: {w3w_info['maps_url']}

üí° L'adresse What3Words ({w3w_info['what3words']}) est parfaite pour communiquer avec les secours - elle identifie un carr√© de 3m x 3m pr√©cis√©ment."""

        # Version texte brut (fallback)
        text_body = f"""
üì± NOTIFICATION Guardian - Alerte de s√©curit√©

üë§ Personne concern√©e: {user_name}
üìÖ Date et heure: {current_time}
{location_section}

üìã INFORMATIONS DE LA SITUATION:
"{situation}"

üîç CONTEXTE:
{user_name} a activ√© Guardian, son assistant de s√©curit√© personnel, et notre intelligence artificielle a √©valu√© sa situation comme n√©cessitant une attention particuli√®re. Cette notification automatique vous est envoy√©e car vous √™tes inscrit(e) comme contact d'urgence.

üí° CONSEILS POUR VOUS AIDER:

1. üìû PREMIER CONTACT (dans les 5 minutes):
   ‚Ä¢ Appelez {user_name} imm√©diatement
   ‚Ä¢ Demandez-lui o√π elle se trouve exactement
   ‚Ä¢ Restez calme et rassurant(e) au t√©l√©phone

2. üó£Ô∏è SI VOUS L'AVEZ AU T√âL√âPHONE:
   ‚Ä¢ Encouragez-la √† se diriger vers un lieu s√ªr (magasin, restaurant ouvert, etc.)
   ‚Ä¢ Proposez de rester en ligne pendant qu'elle se d√©place
   ‚Ä¢ Aidez-la √† identifier les lieux s√©curis√©s autour d'elle
   ‚Ä¢ Si n√©cessaire, guidez-la vers les transports ou un taxi

3. üìû SI AUCUNE R√âPONSE:
   ‚Ä¢ R√©essayez apr√®s 2-3 minutes
   ‚Ä¢ Envoyez un SMS: "J'ai re√ßu ton alerte Guardian, o√π es-tu ?"
   ‚Ä¢ Si toujours aucune r√©ponse apr√®s 10 minutes, contactez les secours

4. üÜò QUAND APPELER LES SECOURS:
   ‚Ä¢ Aucune r√©ponse apr√®s 10 minutes d'essais
   ‚Ä¢ {user_name} vous dit √™tre en danger imm√©diat
   ‚Ä¢ Vous entendez des bruits inqui√©tants au t√©l√©phone
   ‚Ä¢ Elle vous demande explicitement d'appeler les secours

üìû NUM√âROS D'URGENCE (France):
‚Ä¢ 17 - Police/Gendarmerie (danger, agression)
‚Ä¢ 15 - SAMU (urgence m√©dicale)  
‚Ä¢ 18 - Pompiers (accident, secours)
‚Ä¢ 112 - Num√©ro d'urgence europ√©en unique
‚Ä¢ Nom: {user_name}
‚Ä¢ Derni√®re position connue: {location}
‚Ä¢ Heure de l'alerte: {current_time}
‚Ä¢ Nature de la situation: {situation}""" + (f"""
‚Ä¢ Adresse What3Words: {w3w_info['what3words']} ‚≠ê PRIORITAIRE pour les secours
‚Ä¢ Coordonn√©es GPS: {w3w_info['coordinates']['latitude']}, {w3w_info['coordinates']['longitude']}
‚Ä¢ Lien direct: {w3w_info['what3words_url']}""" if w3w_info else "") + f"""

üîÑ SUIVI:
‚Ä¢ Tenez-vous au courant avec les autres contacts d'urgence
‚Ä¢ Informez {user_name} d√®s que vous savez qu'elle va bien
‚Ä¢ Conservez cet email comme r√©f√©rence

‚ö° Cette alerte a √©t√© g√©n√©r√©e automatiquement par Guardian, un syst√®me d'assistance de s√©curit√© bas√© sur l'intelligence artificielle. {user_name} a volontairement activ√© ce syst√®me et vous a d√©sign√©(e) comme contact de confiance.

üõ°Ô∏è Guardian - Syst√®me de s√©curit√© intelligent
üìß Email automatique envoy√© le {current_time}
        """
        
        return subject, html_body, text_body
    
    def _generate_whatsapp_links(self, user_name, situation, user_phone=None):
        """G√©n√®re le lien WhatsApp pour appeler directement la personne en danger"""
        whatsapp_links = {}
        
        # Obtenir le num√©ro de t√©l√©phone de la personne (priorit√© au param√®tre fourni)
        if not user_phone:
            # Chercher dans la config utilisateur (dans emergency.user_info)
            emergency_config = self.config.get('emergency', {})
            user_info = emergency_config.get('user_info', {})
            user_phone = user_info.get('phone', '')
        
        if user_phone:
            # Nettoyer le num√©ro (retirer espaces, + en double, etc.)
            clean_phone = user_phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            if clean_phone.startswith('++'):
                clean_phone = clean_phone[1:]  # Retirer le + en double
            elif not clean_phone.startswith('+'):
                # Si le num√©ro commence par 0 (format fran√ßais), le convertir au format international
                if clean_phone.startswith('0'):
                    clean_phone = '+33' + clean_phone[1:]  # Remplacer 0 par +33
                else:
                    clean_phone = '+' + clean_phone
            
            # Message WhatsApp pr√©-rempli pour appeler la personne
            message = f"Je viens de recevoir une alerte Guardian concernant {user_name}. Je t'appelle imm√©diatement pour m'assurer que tout va bien !"
            
            # URL WhatsApp (encode le message)
            encoded_message = urllib.parse.quote(message)
            whatsapp_url = f"https://wa.me/{clean_phone.replace('+', '')}?text={encoded_message}"
            
            whatsapp_links[user_name] = {
                'phone': user_phone,
                'clean_phone': clean_phone,
                'url': whatsapp_url,
                'name': user_name
            }
        
        return whatsapp_links
    
    def _create_simple_emergency_email(self, user_name, location, situation, current_time, location_coords=None, user_phone=None):
        """Cr√©e un email d'urgence simple avec liens WhatsApp int√©gr√©s"""
        
        # Corps HTML professionnel (version simplifi√©e)
        html_body = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Alerte Guardian</title>
        </head>
        <body style="margin: 0; padding: 0; font-family: 'Segoe UI', Arial, sans-serif; background-color: #f5f5f5;">
            <div style="max-width: 600px; margin: 0 auto; background-color: white; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                
                <!-- Header informatif -->
                <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 30px; text-align: center;">
                    <h1 style="margin: 0; font-size: 28px; font-weight: bold;">üì± NOTIFICATION GUARDIAN</h1>
                    <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">Demande d'assistance de s√©curit√©</p>
                </div>
                
                <div style="padding: 30px;">
                    <!-- Informations d'urgence -->
                    <div style="background: #fff3cd; padding: 25px; border-left: 5px solid #dc3545; border-radius: 8px; margin-bottom: 25px;">
                        <h2 style="color: #dc3545; margin-top: 0; font-size: 20px;">üìç Informations d'urgence</h2>
                        
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; color: #495057;">üë§ Personne:</td>
                                <td style="padding: 8px 0; color: #212529;">{user_name}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; color: #495057;">üìÖ Date et heure:</td>
                                <td style="padding: 8px 0; color: #212529;">{current_time}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px 0; font-weight: bold; color: #495057;">üìç Localisation:</td>
                                <td style="padding: 8px 0; color: #212529;">{location}</td>
                            </tr>
                        </table>
                        
                        <p style="margin: 20px 0 10px 0; font-weight: bold; color: #495057;">‚ö†Ô∏è Situation rapport√©e:</p>
                        <div style="background: white; padding: 18px; border: 1px solid #dee2e6; border-radius: 4px; font-style: italic; color: #212529;">
                            "{situation}"
                        </div>
                    </div>"""
        
        # Ajouter la section cartes si on a des coordonn√©es
        if location_coords and isinstance(location_coords, (list, tuple)) and len(location_coords) >= 2:
            google_maps_url = f"https://www.google.com/maps?q={location_coords[0]},{location_coords[1]}&z=16"
            osm_url = f"https://www.openstreetmap.org/?mlat={location_coords[0]}&mlon={location_coords[1]}&zoom=16"
            
            html_body += f"""
                    
                    <!-- Localisation sur carte -->
                    <div style="background: #e3f2fd; padding: 25px; border-left: 5px solid #1976d2; border-radius: 8px; margin-bottom: 25px;">
                        <h3 style="color: #0d47a1; margin-top: 0; font-size: 18px;">üó∫Ô∏è Localisation sur carte</h3>
                        <p style="margin: 15px 0; color: #0d47a1; text-align: center; font-weight: 500;">
                            Cliquez sur un des liens ci-dessous pour voir la position exacte:
                        </p>
                        <div style="text-align: center; margin: 20px 0;">
                            <a href="{google_maps_url}" style="display: inline-block; background: #34a853; color: white; padding: 12px 20px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                                üó∫Ô∏è Google Maps
                            </a>
                            <a href="{osm_url}" style="display: inline-block; background: #1976d2; color: white; padding: 12px 20px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                                üìç OpenStreetMap
                            </a>
                        </div>
                        <p style="margin: 10px 0; color: #0d47a1; font-size: 13px; text-align: center;">
                            üìç Coordonn√©es: {location_coords[0]}, {location_coords[1]}
                        </p>
                    </div>"""
        
        
        # G√©n√©rer les liens WhatsApp pour appeler la personne en danger
        whatsapp_links = self._generate_whatsapp_links(user_name, situation, user_phone)
        
        html_body += f"""
                    
                    <!-- Actions recommand√©es -->
                    <div style="background: #d4edda; padding: 25px; border-left: 5px solid #28a745; border-radius: 8px; margin-bottom: 25px;">
                        <h3 style="color: #155724; margin-top: 0; font-size: 18px;">üéØ Actions imm√©diates requises</h3>
                        <ol style="margin: 15px 0; padding-left: 25px; color: #155724;">
                            <li style="margin: 10px 0; font-weight: 500;"><strong>Contactez {user_name} IMM√âDIATEMENT</strong> par t√©l√©phone</li>
                            <li style="margin: 10px 0; font-weight: 500;"><strong>Si aucune r√©ponse:</strong> Appelez les secours au <strong style="color: #dc3545;">17 (Police) ou 112 (Urgences)</strong></li>
                            <li style="margin: 10px 0; font-weight: 500;"><strong>Conservez ce message</strong> comme preuve de l'alerte</li>
                        </ol>
                    </div>"""
        
        # Ajouter la section WhatsApp si on a des contacts avec t√©l√©phones
        if whatsapp_links:
            html_body += f"""
                    
                    <!-- Appel WhatsApp direct -->
                    <div style="background: #e8f5e8; padding: 25px; border-left: 5px solid #25d366; border-radius: 8px; margin-bottom: 25px;">
                        <h3 style="color: #075e54; margin-top: 0; font-size: 18px;">üí¨ Appeler {user_name} via WhatsApp</h3>
                        <p style="margin: 15px 0; color: #075e54; font-weight: 500;">
                            <strong>Appelez GRATUITEMENT via WhatsApp :</strong> Cliquez pour ouvrir WhatsApp et appeler {user_name} directement
                        </p>
                        <div style="margin: 20px 0;">"""
            
            for contact_name, contact_info in whatsapp_links.items():
                html_body += f"""
                            <div style="margin: 10px 0; padding: 15px; background: white; border-radius: 8px; border: 1px solid #25d366;">
                                <div style="display: flex; align-items: center; flex-wrap: wrap;">
                                    <div style="flex: 1; min-width: 200px;">
                                        <p style="margin: 0; font-weight: bold; color: #075e54;">üë§ {contact_info['name']}</p>
                                        <p style="margin: 5px 0 0 0; color: #666; font-size: 14px;">üìû {contact_info['phone']}</p>
                                    </div>
                                    <div style="flex-shrink: 0;">
                                        <a href="{contact_info['url']}" style="display: inline-block; background: #25d366; color: white; padding: 12px 20px; text-decoration: none; border-radius: 25px; font-weight: bold; margin: 5px;">
                                            ÔøΩ Appeler via WhatsApp
                                        </a>
                                    </div>
                                </div>
                            </div>"""
            
            html_body += f"""
                        </div>
                        <p style="margin: 15px 0 5px 0; color: #075e54; font-size: 13px; text-align: center;">
                            ‚ö° Appel gratuit via WhatsApp - Le message sera pr√©-rempli pour d√©marrer la conversation
                        </p>
                    </div>"""
        
        html_body += f"""
                </div>
                
                <!-- Footer -->
                <div style="background: #343a40; color: #adb5bd; padding: 20px; text-align: center;">
                    <p style="margin: 0; font-size: 12px;">
                        üì± Alerte automatique Guardian - {current_time}<br>
                        üõ°Ô∏è Syst√®me de s√©curit√© personnelle
                    </p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html_body
    
    def send_email(self, recipient_email, subject, html_body, text_body):
        """Envoie un email via Gmail API"""
        
        if not self.is_available:
            return {
                'success': False,
                'error': 'Gmail API non configur√©'
            }
        
        try:
            # Actualiser le token d'acc√®s
            if not self.refresh_access_token():
                return {
                    'success': False,
                    'error': 'Impossible de renouveler le token d\'acc√®s'
                }
            
            # Cr√©er le message MIME (sans images)
            message = MIMEMultipart('alternative')
            message['Subject'] = subject
            message['From'] = "noreply@guardiannav.com"
            message['To'] = recipient_email
            
            # Ajouter les versions texte et HTML
            text_part = MIMEText(text_body, 'plain', 'utf-8')
            html_part = MIMEText(html_body, 'html', 'utf-8')
            
            message.attach(text_part)
            message.attach(html_part)
            
            # Encoder en base64 pour l'API Gmail
            raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')
            
            # Envoyer via l'API Gmail
            url = "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                'raw': raw_message
            }
            
            print(f"üì§ Envoi email d'urgence Gmail √† {recipient_email}...")
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            result = response.json()
            print(f"‚úÖ Email d'urgence envoy√© avec succ√®s (ID: {result.get('id', 'N/A')})")
            
            return {
                'success': True,
                'message_id': result.get('id'),
                'recipient': recipient_email,
                'subject': subject
            }
            
        except Exception as e:
            error_msg = f"Erreur envoi Gmail: {e}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'recipient': recipient_email
            }
    
    def send_to_emergency_contacts(self, user_name, location, situation, location_coords=None, emergency_type="üö® Situation d'urgence", urgency_level="√©lev√©e"):
        """Envoie un email d'urgence √† tous les contacts d'urgence configur√©s"""
        
        if not self.is_available:
            print("‚ùå Gmail non configur√© - impossible d'envoyer des emails d'urgence")
            return False
        
        # Obtenir les contacts d'urgence de la configuration
        emergency_contacts = self.config.get('emergency_contacts', [])
        
        if not emergency_contacts:
            print("‚ö†Ô∏è Aucun contact d'urgence configur√©")
            return False
        
        success_count = 0
        total_contacts = len(emergency_contacts)
        
        print(f"üìß Envoi d'emails d'urgence √† {total_contacts} contact(s)...")
        
        for contact in emergency_contacts:
            try:
                contact_email = contact.get('email')
                contact_name = contact.get('name', 'Contact d\'urgence')
                
                if not contact_email:
                    print(f"‚ö†Ô∏è Email manquant pour {contact_name}")
                    continue
                
                # Cr√©er l'email d'urgence
                subject, html_body, text_body = self.create_emergency_email(
                    recipient_email=contact_email,
                    user_name=user_name,
                    location=location,
                    situation=situation,
                    location_coords=location_coords,
                    emergency_type=emergency_type,
                    urgency_level=urgency_level
                )
                
                # Envoyer l'email
                result = self.send_email(contact_email, subject, html_body, text_body)
                
                if result.get('success'):
                    success_count += 1
                    print(f"‚úÖ Email envoy√© √† {contact_name} ({contact_email})")
                else:
                    print(f"‚ùå √âchec envoi √† {contact_name}: {result.get('error')}")
                    
            except Exception as e:
                print(f"‚ùå Erreur contact {contact.get('name', 'inconnu')}: {e}")
        
        print(f"üìä R√©sultat: {success_count}/{total_contacts} emails envoy√©s avec succ√®s")
        return success_count > 0


def test_gmail_agent():
    """Test de l'agent Gmail d'urgence"""
    
    try:
        import yaml
        
        with open('api_keys.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        agent = GmailEmergencyAgent(config)
        
        print(f"\nüß™ Test Agent Gmail d'urgence")
        print(f"Configuration: {'‚úÖ Valide' if agent.is_available else '‚ùå Invalide'}")
        
        if agent.is_available:
            print("üîÑ Test de g√©n√©ration d'email...")
            
            subject, html_body, text_body = agent.create_emergency_email(
                recipient_email="test@example.com",
                user_name="Test Guardian",
                location="Paris, France",
                situation="Test de fonctionnement du syst√®me d'urgence",
                location_coords=(48.8566, 2.3522)
            )
            
            print(f"‚úÖ Email g√©n√©r√©:")
            print(f"   - Sujet: {subject}")
            print(f"   - HTML: {len(html_body)} caract√®res")
            print(f"   - Texte: {len(text_body)} caract√®res")
            
    except FileNotFoundError:
        print("‚ùå Fichier api_keys.yaml non trouv√©")
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")


if __name__ == "__main__":
    test_gmail_agent()