"""
Emergency Response System for Guardian
Handles contact notifications and emergency escalation
"""
import smtplib
import logging
import time
from typing import List, Dict, Any
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
# from guardian.emergency_email_generator import EmergencyEmailGenerator  # D√©sactiv√© - utilise ses propres templates

class EmergencyResponse:
    """Syst√®me de r√©ponse d'urgence avec notifications et escalade"""
    
    def __init__(self, config: Dict[str, Any], api_keys_config: Dict[str, Any] = None):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.config = config
        self.emergency_contacts = config.get('emergency_contacts', [])
        self.email_config = config.get('email', {})
        
        # G√©n√©rateur d'emails visuels d√©sactiv√© - utilise ses propres templates
        # self.email_generator = EmergencyEmailGenerator(api_keys_config)
        
    def send_immediate_danger_alert(self, location: tuple, situation: str = ""):
        """Envoie une alerte de danger imm√©diat aux contacts proches"""
        self.logger.critical(f"ALERTE DANGER IMM√âDIAT: {location}")
        
        lat, lon = location
        maps_url = f"https://maps.google.com/?q={lat},{lon}"
        
        # Message d'urgence critique
        urgent_message = f"""
üö® ALERTE URGENCE CRITIQUE - GUARDIAN üö®

VOTRE CONTACT EST EN DANGER IMM√âDIAT !

üìç Position: {lat}, {lon}
üó∫Ô∏è Carte: {maps_url}
‚ö†Ô∏è Situation: {situation}
üïê Heure: {time.strftime('%Y-%m-%d %H:%M:%S')}

‚ö° ACTIONS IMM√âDIATES REQUISES:
1. Appelez cette personne MAINTENANT
2. Si pas de r√©ponse, appelez le 17 (Police)
3. Rendez-vous sur place si possible
4. Partagez cette alerte avec d'autres proches

Cette alerte a √©t√© d√©clench√©e automatiquement par le syst√®me de s√©curit√©.
"""
        
        # Envoyer √† tous les contacts avec priorit√© haute
        for contact in self.emergency_contacts:
            self._send_urgent_email(contact, "üö® DANGER IMM√âDIAT - ASSISTANCE REQUISE", urgent_message)
            self._send_urgent_sms(contact, location, situation)
        
        self.logger.info("Alertes de danger imm√©diat envoy√©es √† tous les contacts")

    def send_location_to_contacts(self, location: tuple, situation: str = ""):
        """Envoie la localisation aux contacts d'urgence"""
        self.logger.info(f"Envoi de localisation d'urgence: {location}")
        
        lat, lon = location
        maps_url = f"https://maps.google.com/?q={lat},{lon}"
        
        message = f"""
ALERTE GUARDIAN - ASSISTANCE REQUISE

Localisation: {lat}, {lon}
Lien Google Maps: {maps_url}
Situation: {situation}
Heure: {time.strftime('%Y-%m-%d %H:%M:%S')}

Cette personne pourrait avoir besoin d'aide.
Merci de v√©rifier sa situation.
"""
        
        for contact in self.emergency_contacts:
            self._send_email(contact, "ALERTE GUARDIAN", message)
            self._send_sms_notification(contact, location)
            
    def send_location_with_refuges_info(self, location: tuple, refuges_info: str, situation: str = ""):
        """Envoie la localisation avec informations sur les refuges et transports"""
        self.logger.info(f"Envoi localisation avec refuges: {location}")
        
        lat, lon = location
        maps_url = f"https://maps.google.com/?q={lat},{lon}"
        
        enhanced_message = f"""
üö® ALERTE GUARDIAN - ASSISTANCE AVEC REFUGES üö®

üìç LOCALISATION: {lat}, {lon}
üó∫Ô∏è Lien Google Maps: {maps_url}
‚ö†Ô∏è Situation: {situation}
üïê Heure: {time.strftime('%Y-%m-%d %H:%M:%S')}

{refuges_info}

üí° CONSEILS POUR AIDER:
1. Appelez cette personne pour v√©rifier sa situation
2. Guidez-la vers le refuge le plus proche si n√©cessaire
3. Restez en contact jusqu'√† ce qu'elle soit en s√©curit√©
4. Appelez les services d'urgence si pas de nouvelles

Cette alerte contient des informations de s√©curit√© actualis√©es.
"""
        
        for contact in self.emergency_contacts:
            self._send_email(contact, "üö® ALERTE AVEC REFUGES - GUARDIAN", enhanced_message)
            self._send_sms_notification(contact, location)
    
    def send_confirmation_alert(self, alert_state: str):
        """Envoie une notification de confirmation d'√©tat"""
        self.logger.info(f"Envoi de notification de confirmation: {alert_state}")
        
        message = f"""
NOTIFICATION GUARDIAN

√âtat: {alert_state}
Heure: {time.strftime('%Y-%m-%d %H:%M:%S')}

Tout semble normal.
"""
        
        # Envoi optionnel aux contacts selon la configuration
        if self.config.get('notify_on_confirmation', False):
            for contact in self.emergency_contacts:
                self._send_email(contact, "Guardian - Confirmation", message)
    
    def _send_email(self, contact: Dict[str, str], subject: str, message: str):
        """Envoie un email √† un contact"""
        try:
            if not self.email_config.get('enabled', False):
                self.logger.debug("Email d√©sactiv√© dans la configuration")
                return
                
            msg = MIMEMultipart()
            msg['From'] = self.email_config['from_email']
            msg['To'] = contact['email']
            msg['Subject'] = subject
            
            msg.attach(MIMEText(message, 'plain'))
            
            # Configuration SMTP (√† adapter selon votre fournisseur)
            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])
            server.starttls()
            server.login(self.email_config['from_email'], self.email_config['password'])
            
            text = msg.as_string()
            server.sendmail(self.email_config['from_email'], contact['email'], text)
            server.quit()
            
            self.logger.info(f"Email envoy√© √† {contact['email']}")
            
        except Exception as e:
            self.logger.error(f"Erreur envoi email √† {contact.get('email', 'inconnu')}: {e}")
    
    def _send_urgent_email(self, contact: Dict[str, str], subject: str, message: str):
        """Envoie un email urgent avec priorit√© haute"""
        try:
            if not self.email_config.get('enabled', False):
                self.logger.debug("Email urgent d√©sactiv√© dans la configuration")
                return
                
            msg = MIMEMultipart()
            msg['From'] = self.email_config['from_email']
            msg['To'] = contact['email']
            msg['Subject'] = subject
            msg['X-Priority'] = '1'  # Priorit√© haute
            msg['X-MSMail-Priority'] = 'High'
            msg['Importance'] = 'High'
            
            msg.attach(MIMEText(message, 'plain'))
            
            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])
            server.starttls()
            server.login(self.email_config['from_email'], self.email_config['password'])
            
            text = msg.as_string()
            server.sendmail(self.email_config['from_email'], contact['email'], text)
            server.quit()
            
            self.logger.critical(f"EMAIL URGENT envoy√© √† {contact['email']}")
            
        except Exception as e:
            self.logger.error(f"Erreur envoi email urgent √† {contact.get('email', 'inconnu')}: {e}")

    def _send_urgent_sms(self, contact: Dict[str, str], location: tuple, situation: str):
        """Envoie un SMS d'urgence (avec Twilio ou simulation)"""
        lat, lon = location
        
        # Message SMS court mais informatif
        sms_message = f"üö® ALERTE GUARDIAN üö®\nVotre contact est en danger!\nPosition: {lat:.4f},{lon:.4f}\nSituation: {situation[:50]}...\nAppelez imm√©diatement!"
        
        self.logger.critical(f"SMS URGENT simul√© √† {contact.get('phone', 'inconnu')}: {sms_message}")
        
        # Int√©gration Twilio (√† d√©commenter si vous avez un compte)
        """
        try:
            from twilio.rest import Client
            
            account_sid = self.config.get('twilio', {}).get('account_sid')
            auth_token = self.config.get('twilio', {}).get('auth_token')
            twilio_number = self.config.get('twilio', {}).get('phone_number')
            
            if account_sid and auth_token:
                client = Client(account_sid, auth_token)
                
                message = client.messages.create(
                    body=sms_message,
                    from_=twilio_number,
                    to=contact.get('phone')
                )
                
                self.logger.critical(f"SMS URGENT Twilio envoy√© √† {contact['phone']}: {message.sid}")
        except ImportError:
            self.logger.warning("Twilio non install√©, SMS en mode simulation")
        except Exception as e:
            self.logger.error(f"Erreur SMS Twilio: {e}")
        """

    def _send_sms_notification(self, contact: Dict[str, str], location: tuple):
        """Envoie une notification SMS (simulation pour l'instant)"""
        self.logger.info(f"SMS simul√© envoy√© √† {contact.get('phone', 'inconnu')}")
        # Ici, vous pourriez int√©grer un service SMS comme Twilio
        
    def escalate_emergency(self, location: tuple, no_response_duration: int):
        """Escalade l'urgence apr√®s absence de r√©ponse"""
        self.logger.warning(f"Escalade d'urgence apr√®s {no_response_duration}s sans r√©ponse")
        
        # Simulation d'appel aux services d'urgence
        self.logger.critical("SIMULATION: Appel automatique aux services d'urgence")
        
        # Notification intensive aux contacts
        self.send_location_to_contacts(
            location, 
            f"URGENCE - Aucune r√©ponse depuis {no_response_duration} secondes"
        )
    
    def send_visual_emergency_alert(self, 
                                  location: tuple, 
                                  emergency_type: str,
                                  urgency_level: str,
                                  situation_details: str,
                                  person_name: str = "Utilisateur Guardian",
                                  additional_info: Dict[str, Any] = None):
        """
        Envoie un email visuel d'urgence enrichi avec carte et g√©olocalisation
        
        Args:
            location: (latitude, longitude)
            emergency_type: Type d'urgence 
            urgency_level: Niveau d'urgence (critique, √©lev√©e, mod√©r√©e)
            situation_details: Description de la situation
            person_name: Nom de la personne en urgence
            additional_info: Informations suppl√©mentaires (chute, vitesse, etc.)
        """
        
        if not self.email_config.get('enabled', False):
            self.logger.info("Emails d√©sactiv√©s - Simulation d'envoi d'email visuel d'urgence")
            self._simulate_visual_email_alert(location, emergency_type, urgency_level)
            return
        
        try:
            # Utiliser un template simple au lieu du g√©n√©rateur complexe
            html_content = f"""
            <html>
            <body style="font-family: Arial, sans-serif;">
                <h2 style="color: #d32f2f;">üö® ALERTE D'URGENCE</h2>
                <p><strong>Personne:</strong> {person_name}</p>
                <p><strong>Type:</strong> {emergency_type}</p>
                <p><strong>Niveau:</strong> {urgency_level.upper()}</p>
                <p><strong>Localisation:</strong> {location}</p>
                <p><strong>D√©tails:</strong> {situation_details}</p>
                {f"<p><strong>Info:</strong> {additional_info}</p>" if additional_info else ""}
                <p><a href="https://www.google.com/maps?q={location[0]},{location[1]}">Voir sur Google Maps</a></p>
            </body>
            </html>
            """
            
            # Pr√©parer l'email
            subject = f"üö® URGENCE {urgency_level.upper()} - {person_name} a besoin d'aide"
            
            # Envoyer √† tous les contacts d'urgence
            for contact in self.emergency_contacts:
                self._send_html_email(
                    to_email=contact.get('email'),
                    to_name=contact.get('name', 'Contact d\'urgence'),
                    subject=subject,
                    html_content=html_content
                )
                
            self.logger.info(f"Emails visuels d'urgence envoy√©s √† {len(self.emergency_contacts)} contacts")
            
        except Exception as e:
            self.logger.error(f"Erreur envoi email visuel d'urgence: {e}")
            # Fallback vers email texte simple
            self.send_location_to_contacts(location, f"{emergency_type}: {situation_details}")
    
    def _send_html_email(self, to_email: str, to_name: str, subject: str, html_content: str):
        """Envoie un email HTML format√©"""
        
        try:
            # Cr√©er le message
            msg = MIMEMultipart('alternative')
            msg['From'] = self.email_config['from_email']
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # Version HTML
            html_part = MIMEText(html_content, 'html', 'utf-8')
            msg.attach(html_part)
            
            # Version texte de secours
            text_content = self._html_to_text_fallback(html_content)
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # Envoyer
            with smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port']) as server:
                server.starttls()
                server.login(self.email_config['from_email'], self.email_config['password'])
                server.send_message(msg)
            
            self.logger.info(f"Email HTML envoy√© √† {to_name} ({to_email})")
            
        except Exception as e:
            self.logger.error(f"Erreur envoi email HTML √† {to_email}: {e}")
    
    def _html_to_text_fallback(self, html_content: str) -> str:
        """Convertit le HTML en texte simple pour fallback"""
        
        # Extraction simple des informations principales
        import re
        
        # Supprimer les balises HTML
        text = re.sub(r'<[^>]+>', '', html_content)
        
        # Nettoyer les espaces multiples
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    def _simulate_visual_email_alert(self, location: tuple, emergency_type: str, urgency_level: str):
        """Simule l'envoi d'un email visuel pour d√©monstration"""
        
        lat, lon = location
        maps_url = f"https://maps.google.com/?q={lat},{lon}"
        what3words = "simulation.exemple.mots"  # Simul√©
        
        print(f"\nüìß SIMULATION - Email visuel d'urgence:")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"üö® ALERTE URGENCE {urgency_level.upper()}")
        print(f"üìã Type: {emergency_type}")
        print(f"üìç Position: {lat:.6f}, {lon:.6f}")
        print(f"üéØ What3Words: {what3words}")
        print(f"üó∫Ô∏è  Carte: {maps_url}")
        print(f"üìß Envoy√© √†: {len(self.emergency_contacts)} contacts")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        
        # Afficher un aper√ßu de l'email pour chaque contact
        for i, contact in enumerate(self.emergency_contacts, 1):
            print(f"   {i}. {contact.get('name', 'Contact')} ({contact.get('email', 'email@example.com')})")
    
    def generate_preview_email(self) -> str:
        """G√©n√®re un aper√ßu d'email pour tests et pr√©visualisation"""
        
        # G√©n√©rateur d√©sactiv√© - retourner un message simple
        return "<html><body><h2>Test Email - EmergencyResponse</h2><p>Syst√®me op√©rationnel</p></body></html>"
    
    def send_fall_emergency_alert(self, location: tuple, fall_info: Dict[str, Any]):
        """Envoie une alerte sp√©cialis√©e pour les chutes"""
        
        fall_type = fall_info.get('fall_type', 'chute_generale')
        severity = fall_info.get('severity', 'mod√©r√©e')
        
        # Traduire le type de chute
        fall_types_fr = {
            'chute_velo': 'üö¥ Chute √† v√©lo',
            'chute_haute_vitesse': 'üèÉ Chute √† haute vitesse',
            'impact_brutal': 'üí• Impact brutal',
            'chute_generale': '‚ö†Ô∏è Chute d√©tect√©e'
        }
        
        emergency_type = fall_types_fr.get(fall_type, 'Chute d√©tect√©e')
        
        # D√©terminer le niveau d'urgence
        urgency_mapping = {
            'l√©g√®re': 'mod√©r√©e',
            'mod√©r√©e': 'mod√©r√©e', 
            'grave': '√©lev√©e',
            'critique': 'critique'
        }
        
        urgency_level = urgency_mapping.get(severity, '√©lev√©e')
        
        # Description de la situation
        situation = f"Chute d√©tect√©e par les capteurs Guardian. "
        if fall_info.get('previous_speed'):
            situation += f"Vitesse avant chute: {fall_info['previous_speed']:.1f} km/h. "
        if fall_info.get('acceleration'):
            situation += f"D√©c√©l√©ration: {fall_info['acceleration']:.1f} m/s¬≤. "
        situation += "La personne ne r√©pond pas aux sollicitations."
        
        # Envoyer l'alerte visuelle
        self.send_visual_emergency_alert(
            location=location,
            emergency_type=emergency_type,
            urgency_level=urgency_level,
            situation_details=situation,
            additional_info=fall_info
        )