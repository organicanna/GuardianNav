import threading
import time
import os
import logging
import queue
from guardian.GPS_agent import StaticAgent
from guardian.voice_agent import VoiceAgent
from guardian.emergency_response import EmergencyResponse
from guardian.intelligent_advisor import IntelligentAdvisor, SmartResponseSystem
from guardian.emergency_locations import EmergencyLocationService
from guardian.fall_detector import FallDetector

class GuardianOrchestrator:
    """Orchestrateur principal pour GuardianNav selon le workflow d√©fini"""
    
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        # Charger les cl√©s API pour emails visuels
        try:
            import yaml
            with open('api_keys.yaml', 'r', encoding='utf-8') as f:
                api_keys_config = yaml.safe_load(f)
        except Exception:
            api_keys_config = {}
            
        self.emergency_response = EmergencyResponse(config.get('emergency_response', {}), api_keys_config)
        
        # Syst√®me d'IA et de conseils
        self.intelligent_advisor = IntelligentAdvisor()
        self.smart_response_system = SmartResponseSystem(self.intelligent_advisor)
        
        # Syst√®me de localisation d'urgence
        try:
            api_config = {}  # Charg√© depuis api_keys.yaml si disponible
            self.emergency_locations = EmergencyLocationService(api_config)
        except Exception as e:
            self.logger.warning(f"Service de localisation d'urgence non disponible: {e}")
            self.emergency_locations = None
        
        # D√©tecteur de chute
        self.fall_detector = FallDetector(
            speed_threshold_high=15.0,  # km/h - vitesse √©lev√©e √† v√©lo
            speed_threshold_low=2.0,    # km/h - quasi-immobile
            acceleration_threshold=-8.0, # m/s¬≤ - d√©c√©l√©ration brutale
            stationary_time=30.0        # secondes sans mouvement = urgence
        )
        
        # √âtats du syst√®me
        self.current_position = None
        self.agents_lock = threading.Lock()
        self.shutdown_event = threading.Event()
        self.response_queue = queue.Queue()
        
        # Timeout pour les r√©ponses utilisateur
        self.response_timeout = config.get('emergency_response', {}).get('timeout_seconds', 600)
        
    def handle_alert(self, trigger_type: str, position: tuple = None):
        """G√®re une alerte selon le workflow du diagramme"""
        self.logger.warning(f"ALERTE d√©clench√©e: {trigger_type}")
        
        if position:
            self.current_position = position
        
        print(f"\nüö® ALERTE ({trigger_type}) : Tout va bien ? üö®")
        print("R√©pondez 'oui' ou 'non' (vocal ou texte)")
        
        # D√©marrer l'√©coute de r√©ponse avec timeout
        response = self._wait_for_response()
        
        if response == "oui":
            self._handle_positive_response()
        elif response == "non":
            self._handle_negative_response()
        else:
            self._handle_no_response()
    
    def _wait_for_response(self) -> str:
        """Attend une r√©ponse utilisateur avec timeout"""
        self.logger.info(f"Attente de r√©ponse (timeout: {self.response_timeout}s)")
        
        try:
            # Attendre une r√©ponse pendant le timeout
            response = self.response_queue.get(timeout=self.response_timeout)
            self.logger.info(f"R√©ponse re√ßue: {response}")
            return response.lower()
        except queue.Empty:
            self.logger.warning("Aucune r√©ponse re√ßue dans le d√©lai imparti")
            return None
    
    def _handle_positive_response(self):
        """G√®re une r√©ponse positive ('oui')"""
        self.logger.info("R√©ponse positive re√ßue - Situation normale")
        print("‚úÖ OK, merci de votre r√©ponse. Surveillance continue.\n")
        
        # Envoyer notification de confirmation si configur√©
        self.emergency_response.send_confirmation_alert("Situation normale - Utilisateur a confirm√©")
    
    def _handle_negative_response(self):
        """G√®re une r√©ponse n√©gative ('non') avec IA"""
        self.logger.warning("R√©ponse n√©gative re√ßue - Demande d'aide")
        print("‚ö†Ô∏è  Que se passe-t-il ? D√©crivez votre situation :")
        print("ü§ñ Le syst√®me IA va analyser votre r√©ponse pour vous conseiller...")
        
        # Demander des d√©tails sur la situation
        try:
            reason = self.response_queue.get(timeout=120)  # 2 minutes pour expliquer
            self.logger.warning(f"Motif re√ßu: {reason}")
            
            # Analyser la situation avec l'IA
            smart_response = self.smart_response_system.process_emergency_response(reason, "emergency_description")
            
            print("\n" + "="*60)
            print(smart_response["message"])
            print("="*60)
            
            # D√©clencher l'assistance avec les conseils IA
            self._trigger_emergency_assistance_with_ai(reason, smart_response["analysis"])
            
        except queue.Empty:
            reason = "Aucun d√©tail fourni"
            self.logger.warning("Aucun d√©tail fourni par l'utilisateur")
            # D√©clencher l'assistance sans analyse IA
            self._trigger_emergency_assistance(reason)
    
    def _handle_no_response(self):
        """G√®re l'absence de r√©ponse (timeout)"""
        self.logger.critical("AUCUNE R√âPONSE - D√©clenchement d'urgence automatique")
        print("üö® AUCUNE R√âPONSE D√âTECT√âE - D√âCLENCHEMENT D'URGENCE AUTOMATIQUE üö®")
        
        self._trigger_emergency_assistance("Aucune r√©ponse de l'utilisateur")
    
    def _trigger_emergency_assistance(self, reason: str):
        """D√©clenche l'assistance d'urgence compl√®te"""
        self.logger.critical(f"D√©clenchement assistance d'urgence: {reason}")
        
        print("üÜò ASSISTANCE D'URGENCE D√âCLENCH√âE:")
        print("   üìç Envoi de localisation aux contacts")
        print("   üìû Notification des contacts d'urgence")
        print("   ‚è±Ô∏è  Escalade automatique programm√©e")
        
        # Envoyer la localisation aux contacts
        if self.current_position:
            self.emergency_response.send_location_to_contacts(self.current_position, reason)
        
        # Programmer l'escalade d'urgence
        self._schedule_emergency_escalation(reason)
        
        print("‚úÖ Contacts d'urgence notifi√©s. Aide en route.")
    
    def _trigger_emergency_assistance_with_ai(self, reason: str, ai_analysis: dict):
        """D√©clenche l'assistance d'urgence avec analyse IA"""
        self.logger.critical(f"D√©clenchement assistance d'urgence avec IA: {reason}")
        
        # Actions imm√©diates bas√©es sur l'analyse IA
        print(f"\nü§ñ **ASSISTANCE IA ACTIV√âE** - Type: {ai_analysis['emergency_type']}")
        print(f"üö® Urgence: {ai_analysis['urgency_level']}")
        
        print("\nüìã **ACTIONS IMM√âDIATES:**")
        for action in ai_analysis['immediate_actions']:
            print(f"   ‚úì {action}")
        
        # Cas sp√©ciaux selon le type d'urgence
        if ai_analysis['emergency_type'] == 'security' and ai_analysis['urgency_level'] == 'high':
            self._handle_immediate_danger_situation(reason, ai_analysis)
        else:
            self._handle_standard_emergency(reason, ai_analysis)
        
        # Programmer l'escalade avec priorit√© selon l'urgence
        urgency_multiplier = {"high": 0.3, "medium": 1.0, "low": 2.0}
        escalation_delay = 300 * urgency_multiplier.get(ai_analysis['urgency_level'], 1.0)  # 1.5-10 min
        self._schedule_emergency_escalation(reason, int(escalation_delay))

    def _handle_immediate_danger_situation(self, reason: str, ai_analysis: dict):
        """G√®re une situation de danger imm√©diat (agression, menace, etc.)"""
        self.logger.critical("SITUATION DE DANGER IMM√âDIAT D√âTECT√âE")
        
        print("\nüö® **DANGER IMM√âDIAT D√âTECT√â - PROTOCOLE D'URGENCE ACTIV√â** üö®")
        
        if self.current_position and self.emergency_locations:
            print("\nüîç Recherche de refuges et moyens d'√©vasion...")
            
            # Trouver refuges et transports d'urgence
            refuges = self.emergency_locations.find_emergency_refuges(self.current_position, radius_m=300)
            transports = self.emergency_locations.find_emergency_transport(self.current_position, radius_m=500)
            
            # Formatter les informations avec itin√©raires d'√©vacuation
            refuges_message = self.emergency_locations.format_emergency_locations_message(
                refuges, transports, current_location=self.current_position
            )
            
            print(refuges_message)
            
            # Envoyer alerte critique aux contacts avec refuges
            enhanced_reason = f"DANGER IMM√âDIAT: {reason}\n\n{refuges_message}"
            self.emergency_response.send_immediate_danger_alert(self.current_position, enhanced_reason)
            
            print("\nüö® ALERTE DE DANGER IMM√âDIAT envoy√©e √† tous vos contacts!")
            print("üìç Informations sur les refuges et transports incluses")
            
        else:
            # Fallback si pas de service de localisation
            self.emergency_response.send_immediate_danger_alert(self.current_position, reason)
        
        print("\n‚ö° **ACTIONS RECOMMAND√âES IMM√âDIATEMENT:**")
        print("   1. üìû Appelez le 17 (Police) si en danger imm√©diat")
        print("   2. üèÉ Dirigez-vous vers le refuge le plus proche")
        print("   3. üöá Utilisez les transports publics pour vous √©loigner")
        print("   4. üì± Restez en contact avec vos proches")

    def _handle_standard_emergency(self, reason: str, ai_analysis: dict):
        """G√®re une urgence standard avec refuges et transports"""
        print("\nüÜò **ASSISTANCE D'URGENCE AVEC REFUGES**")
        
        if self.current_position and self.emergency_locations:
            print("\nüîç Recherche d'aide √† proximit√©...")
            
            # Trouver refuges et transports
            refuges = self.emergency_locations.find_emergency_refuges(self.current_position)
            transports = self.emergency_locations.find_emergency_transport(self.current_position)
            
            # Formatter et afficher avec itin√©raires
            refuges_message = self.emergency_locations.format_emergency_locations_message(
                refuges, transports, current_location=self.current_position
            )
            print(refuges_message)
            
            # Notification avec informations de refuges
            enhanced_reason = f"{reason}\n\nAnalyse IA:\n- Type: {ai_analysis['emergency_type']}\n- Urgence: {ai_analysis['urgency_level']}\n\n{refuges_message}"
            self.emergency_response.send_location_with_refuges_info(self.current_position, refuges_message, enhanced_reason)
            
        else:
            # Fallback standard
            enhanced_reason = f"{reason}\n\nAnalyse IA:\n- Type: {ai_analysis['emergency_type']}\n- Urgence: {ai_analysis['urgency_level']}\n- Actions: {', '.join(ai_analysis['immediate_actions'])}"
            self.emergency_response.send_location_to_contacts(self.current_position, enhanced_reason)
        
        print("\n‚úÖ Contacts notifi√©s avec informations d'aide √† proximit√©")
    
    def handle_fall_detection(self, fall_info: dict):
        """
        G√®re la d√©tection d'une chute
        
        Args:
            fall_info: Informations sur la chute d√©tect√©e
        """
        fall_type = fall_info.get('fall_type', 'chute_generale')
        severity = fall_info.get('severity', 'mod√©r√©e')
        position = fall_info.get('position', self.current_position)
        
        print(f"\nüö® CHUTE D√âTECT√âE ! üö®")
        print(f"Type: {self._translate_fall_type(fall_type)}")
        print(f"S√©v√©rit√©: {severity}")
        print(f"Vitesse avant chute: {fall_info.get('previous_speed', 0):.1f} km/h")
        print(f"D√©c√©l√©ration: {fall_info.get('acceleration', 0):.1f} m/s¬≤")
        
        # Message personnalis√© selon le type de chute
        message = self._get_fall_response_message(fall_type, severity)
        print(f"\nü§ñ Guardian: {message}")
        
        # Demander confirmation de l'√©tat
        print(f"\n‚ùì √ätes-vous bless√©(e) ? (R√©pondez 'oui' ou 'non' dans les 30 secondes)")
        print("   Si aucune r√©ponse, j'alerterai automatiquement les secours...")
        
        # D√©marrer countdown d'urgence
        self._start_fall_emergency_countdown(fall_info)
    
    def handle_post_fall_emergency(self, post_fall_info: dict):
        """
        G√®re l'urgence prolong√©e apr√®s une chute
        """
        time_since_fall = post_fall_info.get('time_since_fall', 0)
        
        print(f"\nüÜò URGENCE MAXIMALE - IMMOBILIT√â PROLONG√âE APR√àS CHUTE üÜò")
        print(f"Temps √©coul√© depuis la chute: {time_since_fall:.0f} secondes")
        print(f"Mouvement d√©tect√©: {post_fall_info.get('movement_since_fall', 0):.1f}m")
        
        # Alerte imm√©diate sans demander confirmation
        self._trigger_fall_emergency_response(post_fall_info, immediate=True)
    
    def _translate_fall_type(self, fall_type: str) -> str:
        """Traduit les types de chute en fran√ßais"""
        translations = {
            'chute_velo': 'üö¥ Chute √† v√©lo',
            'chute_haute_vitesse': 'üèÉ Chute √† haute vitesse', 
            'impact_brutal': 'üí• Impact brutal',
            'chute_generale': '‚ö†Ô∏è Chute g√©n√©rale'
        }
        return translations.get(fall_type, fall_type)
    
    def _get_fall_response_message(self, fall_type: str, severity: str) -> str:
        """
        G√©n√®re un message personnalis√© selon le type et la s√©v√©rit√© de chute
        """
        if fall_type == 'chute_velo':
            if severity in ['critique', 'grave']:
                return "J'ai d√©tect√© une chute √† v√©lo potentiellement grave. Restez immobile si possible et ne bougez pas la t√™te si vous ressentez des douleurs au cou. Les secours arrivent."
            else:
                return "Chute √† v√©lo d√©tect√©e. V√©rifiez si vous pouvez bouger vos membres sans douleur. Attention aux blessures qui ne sont pas imm√©diatement visibles."
                
        elif fall_type == 'chute_haute_vitesse':
            return "Chute √† haute vitesse d√©tect√©e ! Ne bougez pas si vous ressentez des douleurs. J'alerte imm√©diatement les secours et vos contacts d'urgence."
            
        elif fall_type == 'impact_brutal':
            return "Impact brutal d√©tect√©. Restez calme et √©valuez vos blessures. Si vous avez mal √† la t√™te, au cou ou au dos, ne bougez pas."
            
        else:
            return "Chute d√©tect√©e. Prenez votre temps pour vous relever et v√©rifiez que vous n'√™tes pas bless√©(e). Je surveille votre √©tat."
    
    def _start_fall_emergency_countdown(self, fall_info: dict):
        """
        D√©marre un countdown d'urgence apr√®s chute avec possibilit√© d'annulation
        """
        def emergency_countdown():
            # Attendre r√©ponse utilisateur pendant 30 secondes
            start_time = time.time()
            timeout = 30.0
            
            while time.time() - start_time < timeout:
                if self.shutdown_event.is_set():
                    return
                    
                try:
                    response = self.response_queue.get(timeout=1.0)
                    
                    if response.lower() == 'non':
                        print("\n‚úÖ Bien re√ßu - Vous semblez aller bien")
                        print("ü§ñ Guardian: Parfait ! Je continue la surveillance au cas o√π.")
                        print("   Prenez votre temps pour vous remettre et soyez prudent(e).")
                        
                        # Reset du d√©tecteur mais continuer surveillance
                        return
                        
                    elif response.lower() == 'oui':
                        print("\nüö® URGENCE CONFIRM√âE - BLESSURE APR√àS CHUTE")
                        self._trigger_fall_emergency_response(fall_info, user_confirmed=True)
                        return
                        
                except queue.Empty:
                    continue
            
            # Timeout - d√©clencher urgence automatique
            print("\n‚è∞ TIMEOUT - AUCUNE R√âPONSE APR√àS CHUTE")
            print("üö® Je d√©clenche automatiquement l'alerte d'urgence")
            self._trigger_fall_emergency_response(fall_info, timeout=True)
        
        # D√©marrer le countdown dans un thread s√©par√©
        countdown_thread = threading.Thread(target=emergency_countdown, daemon=True)
        countdown_thread.start()
    
    def _trigger_fall_emergency_response(self, fall_info: dict, user_confirmed: bool = False, 
                                       timeout: bool = False, immediate: bool = False):
        """
        D√©clenche la r√©ponse d'urgence pour chute avec contexte sp√©cialis√©
        """
        fall_type = fall_info.get('fall_type', 'chute_generale')
        severity = fall_info.get('severity', 'mod√©r√©e')
        position = fall_info.get('position', self.current_position)
        
        # Construire le message d'urgence sp√©cialis√©
        if immediate:
            reason = f"üÜò URGENCE MAXIMALE - IMMOBILIT√â PROLONG√âE APR√àS CHUTE\n\n"
        elif user_confirmed:
            reason = f"üö® URGENCE CONFIRM√âE - BLESSURE APR√àS CHUTE\n\n"
        elif timeout:
            reason = f"‚è∞ URGENCE AUTOMATIQUE - AUCUNE R√âPONSE APR√àS CHUTE\n\n"
        else:
            reason = f"üö® CHUTE D√âTECT√âE N√âCESSITANT ASSISTANCE\n\n"
        
        reason += f"Type de chute: {self._translate_fall_type(fall_type)}\n"
        reason += f"S√©v√©rit√© √©valu√©e: {severity}\n"
        reason += f"Vitesse avant chute: {fall_info.get('previous_speed', 0):.1f} km/h\n"
        reason += f"D√©c√©l√©ration mesur√©e: {fall_info.get('acceleration', 0):.1f} m/s¬≤\n"
        
        if immediate:
            reason += f"‚ö†Ô∏è Personne immobile depuis {fall_info.get('time_since_fall', 0):.0f} secondes apr√®s la chute"
        
        # Utiliser l'IA pour analyser la situation de chute
        if self.intelligent_advisor:
            ai_context = f"Chute d√©tect√©e: {fall_type}, s√©v√©rit√© {severity}, "
            if user_confirmed:
                ai_context += "utilisateur confirme √™tre bless√©"
            elif timeout:
                ai_context += "aucune r√©ponse de l'utilisateur apr√®s 30 secondes"
            elif immediate:
                ai_context += "immobilit√© prolong√©e apr√®s chute"
            else:
                ai_context += "chute n√©cessitant v√©rification"
                
            ai_analysis = self.intelligent_advisor.analyze_emergency_situation(
                ai_context, position, "chute_accident"
            )
        else:
            ai_analysis = {'emergency_type': 'Accident/Chute', 'urgency_level': '√âlev√©e'}
        
        # Recherche d'aide m√©dicale d'urgence √† proximit√©
        if self.emergency_locations and position:
            print("\nüöë Recherche d'aide m√©dicale d'urgence √† proximit√©...")
            
            medical_help = self.emergency_locations.find_emergency_refuges(position, radius_m=2000)
            transports = self.emergency_locations.find_emergency_transport(position, radius_m=1000)
            
            medical_message = self.emergency_locations.format_emergency_locations_message(
                medical_help, transports, current_location=position
            )
            
            print(medical_message)
            
            # Envoyer l'alerte visuelle de chute avec informations compl√®tes
            self.emergency_response.send_fall_emergency_alert(position, fall_info)
            
            # Envoyer aussi l'alerte traditionnelle avec refuges
            enhanced_reason = f"{reason}\n\nAnalyse IA:\n- Type: {ai_analysis['emergency_type']}\n- Urgence: {ai_analysis['urgency_level']}\n\n{medical_message}"
            self.emergency_response.send_critical_alert_with_refuges(position, medical_message, enhanced_reason)
            
        else:
            # Envoyer l'alerte visuelle de chute
            self.emergency_response.send_fall_emergency_alert(position, fall_info)
            
            # Alerte traditionnelle de fallback
            enhanced_reason = f"{reason}\n\nAnalyse IA:\n- Type: {ai_analysis['emergency_type']}\n- Urgence: {ai_analysis['urgency_level']}"
            self.emergency_response.send_critical_alert(position, enhanced_reason)
        
        print(f"\n‚úÖ Alerte d'urgence envoy√©e pour chute")
        print(f"üöë Les secours et vos contacts ont √©t√© notifi√©s")
        
        if not immediate:
            print(f"üì± Gardez votre t√©l√©phone pr√®s de vous")
            print(f"üè• Des informations sur l'aide m√©dicale √† proximit√© ont √©t√© partag√©es")
    
    def _schedule_emergency_escalation(self, reason: str, delay_seconds: int = 600):
        """Programme une escalade d'urgence apr√®s d√©lai personnalis√©"""
        def escalate():
            time.sleep(delay_seconds)
            if not self.shutdown_event.is_set():
                self.emergency_response.escalate_emergency(self.current_position, delay_seconds)
                print(f"\nüö® ESCALADE AUTOMATIQUE apr√®s {delay_seconds}s d'inactivit√©")
                print("üìû Services d'urgence contact√©s automatiquement")
        
        escalation_thread = threading.Thread(target=escalate)
        escalation_thread.daemon = True
        escalation_thread.start()
    
    def process_user_input(self, text_input: str):
        """Traite l'entr√©e utilisateur (texte ou vocal)"""
        if text_input.lower() in ["oui", "non"]:
            self.response_queue.put(text_input)
        else:
            # Pour les explications d√©taill√©es
            self.response_queue.put(text_input)

def static_monitor(orchestrator, agent):
    """Surveille les positions GPS"""
    logger = logging.getLogger("static_monitor")
    
    for position in agent.simulate_gps():
        if orchestrator.shutdown_event.is_set():
            break
            
        orchestrator.current_position = position
        
        if orchestrator.agents_lock.acquire(blocking=False):
            try:
                # V√©rifier immobilit√© prolong√©e
                if agent.update_position(position):
                    orchestrator.handle_alert("immobilit√© prolong√©e", position)
                
                # V√©rifier d√©tection de chute
                fall_info = orchestrator.fall_detector.update_position(position)
                if fall_info:
                    orchestrator.handle_fall_detection(fall_info)
                    
                # V√©rifier statut post-chute
                post_fall_info = orchestrator.fall_detector.check_post_fall_status(position)
                if post_fall_info:
                    orchestrator.handle_post_fall_emergency(post_fall_info)
                    
            finally:
                orchestrator.agents_lock.release()
        
        time.sleep(1)

def voice_monitor(orchestrator, voice_agent):
    """Surveille les commandes vocales"""
    logger = logging.getLogger("voice_monitor")
    
    while not orchestrator.shutdown_event.is_set():
        if orchestrator.agents_lock.acquire(blocking=False):
            try:
                result = voice_agent.listen_for_keywords()
                if result:
                    # V√©rifier si c'est une r√©ponse √† une alerte ou une demande d'aide
                    # Pour simplifier, on traite tous les mots-cl√©s comme des alertes
                    orchestrator.handle_alert("mot-cl√© d'urgence d√©tect√©")
            finally:
                orchestrator.agents_lock.release()
        
        time.sleep(1)

def console_input_monitor(orchestrator):
    """Surveille les entr√©es console en arri√®re-plan"""
    logger = logging.getLogger("console_input")
    
    while not orchestrator.shutdown_event.is_set():
        try:
            user_input = input().strip()
            if user_input:
                orchestrator.process_user_input(user_input)
        except (EOFError, KeyboardInterrupt):
            break
        except Exception as e:
            logger.debug(f"Erreur entr√©e console: {e}")
            time.sleep(1)

def main():
    """Point d'entr√©e principal pour GuardianNav"""
    import logging
    from guardian.config import Config
    
    logger = logging.getLogger(__name__)
    
    try:
        # Charger la configuration
        config = Config()
        
        # Cr√©er l'orchestrateur principal
        orchestrator = GuardianOrchestrator(config.config_data)
        
        # Cr√©er les agents avec la configuration
        static_config = config.get_static_agent_config()
        voice_config = config.get_voice_agent_config()
        
        logger.info("Initialisation des agents...")
        static_agent = StaticAgent(**static_config)
        
        # V√©rifier que le mod√®le Vosk existe
        model_path = voice_config.get("model_path")
        if not model_path or not os.path.exists(model_path):
            logger.warning(f"Mod√®le Vosk non trouv√© √† {model_path}")
            logger.info("Fonctionnement en mode GPS uniquement")
            voice_agent = None
        else:
            voice_agent = VoiceAgent(**voice_config)
        
        # D√©marrer le monitoring GPS
        logger.info("D√©marrage du monitoring GPS...")
        t_static = threading.Thread(target=static_monitor, args=(orchestrator, static_agent))
        t_static.daemon = True
        t_static.start()
        
        # D√©marrer le monitoring vocal si disponible
        if voice_agent:
            logger.info("D√©marrage du monitoring vocal...")
            t_voice = threading.Thread(target=voice_monitor, args=(orchestrator, voice_agent))
            t_voice.daemon = True
            t_voice.start()
        
        # D√©marrer le monitoring des entr√©es console
        logger.info("D√©marrage du monitoring des entr√©es...")
        t_input = threading.Thread(target=console_input_monitor, args=(orchestrator,))
        t_input.daemon = True
        t_input.start()
        
        logger.info("GuardianNav d√©marr√© avec succ√®s!")
        print("üõ°Ô∏è  GuardianNav est actif et surveille votre s√©curit√©")
        print("üì± Tapez 'oui' ou 'non' pour r√©pondre aux alertes")
        print("üîÑ Le syst√®me surveille votre position et √©coute les mots-cl√©s d'urgence")
        print("‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")
        print("-" * 60)
        
        # Attendre ind√©finiment (les threads sont en daemon)
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("Arr√™t demand√© par l'utilisateur")
            orchestrator.shutdown_event.set()
            
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage: {e}")
        raise

if __name__ == "__main__":
    main()