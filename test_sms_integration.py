#!/usr/bin/env python3
"""
Test d'int√©gration SMS pour GuardianNav
"""

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

from guardian.sms_agent import SMSAgent
import yaml

def test_sms_configuration():
    """Test de la configuration SMS"""
    print("üß™ Test de configuration SMS...")
    
    try:
        # Charger la configuration
        with open('api_keys.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # V√©rifier la configuration SMS
        sms_config = config.get('notification_services', {}).get('twilio', {})
        
        print("‚úÖ Configuration SMS trouv√©e:")
        print(f"   - Account SID: {sms_config.get('account_sid', 'Non configur√©')}")
        print(f"   - Phone Number: {sms_config.get('phone_number', 'Non configur√©')}")
        
        # Tester les contacts d'urgence
        contacts = config.get('emergency_contacts', [])
        print(f"   - Contacts d'urgence: {len(contacts)} contact(s)")
        
        # Initialiser l'agent SMS
        sms_agent = SMSAgent(config)
        print("‚úÖ SMSAgent initialis√© avec succ√®s")
        
        # Test de connexion
        if sms_agent.test_sms_connection():
            print("‚úÖ Connexion Twilio OK")
        else:
            print("‚ö†Ô∏è Connexion Twilio en mode simulation")
        
        # Test d'envoi de message d'urgence
        emergency_context = {
            'user_name': 'Test User',
            'emergency_type': 'Test d\'int√©gration',
            'location': {
                'address': '48.8566, 2.3522',
                'what3words': 'test.location.here'
            }
        }
        
        print("\nüì± Test d'envoi SMS d'urgence...")
        # Utiliser les vrais contacts de la config ou un contact de test
        test_contacts = contacts if contacts else [{'name': 'Test', 'phone': '+33123456789', 'email': 'test@example.com'}]
        result = sms_agent.send_emergency_sms(test_contacts, emergency_context)
        
        if result:
            print("‚úÖ SMS de test envoy√© avec succ√®s (ou simul√©)")
        else:
            print("‚ö†Ô∏è SMS en mode simulation")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_guardian_integration():
    """Test d'int√©gration avec GuardianOrchestrator"""
    print("\nüß™ Test d'int√©gration avec Guardian...")
    
    try:
        from guardian.guardian_agent import GuardianOrchestrator
        
        # Charger la config pour Guardian
        with open('api_keys.yaml', 'r', encoding='utf-8') as f:
            guardian_config = yaml.safe_load(f)
        
        # Cr√©er une instance de Guardian
        orchestrator = GuardianOrchestrator(guardian_config)
        
        # V√©rifier que SMSAgent est initialis√©
        if hasattr(orchestrator, 'sms_agent'):
            print("‚úÖ SMSAgent int√©gr√© dans GuardianOrchestrator")
            
            # V√©rifier les m√©thodes d'urgence
            if hasattr(orchestrator, '_send_emergency_notifications'):
                print("‚úÖ M√©thode _send_emergency_notifications disponible")
                
                # Test des notifications d'urgence (simulation)
                print("\nüìßüì± Test des notifications d'urgence...")
                emergency_context = {
                    'emergency_type': 'Test d\'int√©gration',
                    'what3words': 'test.integration.here'
                }
                
                try:
                    orchestrator._send_emergency_notifications(emergency_context, "Test d'int√©gration SMS")
                    print("‚úÖ Notifications d'urgence test√©es avec succ√®s")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors du test de notifications: {e}")
                    
            else:
                print("‚ùå M√©thode _send_emergency_notifications non trouv√©e")
        else:
            print("‚ùå SMSAgent non trouv√© dans GuardianOrchestrator")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Test d'int√©gration SMS pour GuardianNav")
    print("=" * 50)
    
    # Test 1: Configuration SMS
    config_ok = test_sms_configuration()
    
    # Test 2: Int√©gration Guardian
    integration_ok = test_guardian_integration()
    
    print("\n" + "=" * 50)
    if config_ok and integration_ok:
        print("‚úÖ Tous les tests d'int√©gration SMS r√©ussis!")
        print("üì± Le syst√®me peut maintenant envoyer des SMS d'urgence")
        print("\nüí° Configuration requise:")
        print("   1. Configurer les cl√©s Twilio dans api_keys.yaml")
        print("   2. Ajouter des contacts d'urgence dans api_keys.yaml")
        print("   3. Le syst√®me enverra automatiquement Email + SMS en cas d'urgence")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©")
        print("üìã V√©rifiez la configuration dans api_keys.yaml")
    
    print("\nüîß Pour configurer:")
    print("   - Twilio Account SID et Auth Token")
    print("   - Num√©ro de t√©l√©phone Twilio")
    print("   - Liste des contacts d'urgence (email + t√©l√©phone)")