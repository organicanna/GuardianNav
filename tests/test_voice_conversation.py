#!/usr/bin/env python3
"""
Test de la conversation vocale Guardian
V√©rifie le bon fonctionnement de toutes les composantes
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_voice_conversation_components():
    """Test des composants de conversation vocale"""
    print("üß™ **TEST DES COMPOSANTS DE CONVERSATION VOCALE**")
    print("=" * 60)
    
    results = {}
    
    # Test 1: Imports des modules
    print("\n1Ô∏è‚É£ **Test des imports**")
    try:
        from guardian.voice_conversation_agent import VoiceConversationAgent
        print("‚úÖ VoiceConversationAgent import√©")
        results['voice_agent_import'] = True
    except ImportError as e:
        print(f"‚ùå Erreur import VoiceConversationAgent: {e}")
        results['voice_agent_import'] = False
        
    # Test 2: D√©pendances vocales
    print("\n2Ô∏è‚É£ **Test des d√©pendances vocales**")
    dependencies = [
        ('sounddevice', 'Capture audio'),
        ('vosk', 'Reconnaissance vocale'),
        ('pygame', 'Lecture audio'),
        ('yaml', 'Configuration')
    ]
    
    for module, desc in dependencies:
        try:
            __import__(module)
            print(f"‚úÖ {module}: {desc}")
            results[f'dep_{module}'] = True
        except ImportError:
            print(f"‚ùå {module}: {desc}")
            results[f'dep_{module}'] = False
            
    # Test 3: APIs Google Cloud (optionnel)
    print("\n3Ô∏è‚É£ **Test des APIs Google Cloud**")
    google_apis = [
        ('google.cloud.texttospeech', 'Text-to-Speech'),
        ('google.cloud.speech', 'Speech-to-Text'),
        ('google.cloud.aiplatform', 'Vertex AI')
    ]
    
    for api, desc in google_apis:
        try:
            parts = api.split('.')
            module = __import__(parts[0])
            for part in parts[1:]:
                module = getattr(module, part)
            print(f"‚úÖ {api}: {desc}")
            results[f'api_{api}'] = True
        except (ImportError, AttributeError):
            print(f"‚ö†Ô∏è {api}: {desc} (optionnel)")
            results[f'api_{api}'] = False
            
    # Test 4: Mod√®le Vosk
    print("\n4Ô∏è‚É£ **Test du mod√®le Vosk**")
    vosk_paths = [
        "vosk-model-small-fr-0.22",
        "../vosk-model-small-fr-0.22"
    ]
    
    vosk_found = False
    for path in vosk_paths:
        if os.path.exists(path):
            print(f"‚úÖ Mod√®le Vosk trouv√©: {path}")
            results['vosk_model'] = path
            vosk_found = True
            break
            
    if not vosk_found:
        print("‚ùå Mod√®le Vosk non trouv√©")
        print("üí° T√©l√©chargez avec: python setup_voice_conversation.py")
        results['vosk_model'] = False
        
    # Test 5: Configuration API
    print("\n5Ô∏è‚É£ **Test de la configuration**")
    try:
        import yaml
        with open('api_keys.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print("‚úÖ Fichier api_keys.yaml trouv√©")
        
        google_config = config.get('google_cloud', {})
        if google_config.get('vertex_ai', {}).get('api_key'):
            print("‚úÖ Cl√© Vertex AI configur√©e")
        else:
            print("‚ö†Ô∏è Cl√© Vertex AI non configur√©e (mode simulation)")
            
        results['config'] = True
    except FileNotFoundError:
        print("‚ö†Ô∏è Fichier api_keys.yaml non trouv√© (mode simulation)")
        results['config'] = False
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        results['config'] = False
        
    return results

def test_voice_agent_initialization():
    """Test d'initialisation de l'agent vocal"""
    print("\nüöÄ **TEST D'INITIALISATION DE L'AGENT VOCAL**")
    print("-" * 50)
    
    try:
        from guardian.voice_conversation_agent import VoiceConversationAgent
        
        # Configuration de test
        import yaml
        try:
            with open('api_keys.yaml', 'r') as f:
                config = yaml.safe_load(f)
        except:
            config = {}
            
        # Initialiser l'agent
        print("üîß Initialisation de VoiceConversationAgent...")
        agent = VoiceConversationAgent(
            api_keys_config=config,
            vosk_model_path="vosk-model-small-fr-0.22" if os.path.exists("vosk-model-small-fr-0.22") else None
        )
        
        # V√©rifier le statut
        status = agent.get_status_info()
        print("üìä Statut de l'agent:")
        print(f"   üîä Synth√®se vocale: {'‚úÖ' if status['speech_available'] else '‚ùå'}")
        print(f"   üé§ Reconnaissance: {status['recognition_engine']}")
        print(f"   üß† Vertex AI: {'‚úÖ' if status['vertex_ai_available'] else '‚ùå'}")
        
        print("‚úÖ Agent vocal initialis√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation: {e}")
        import traceback
        traceback.print_exc()
        return False

def show_installation_guide():
    """Affiche le guide d'installation"""
    print("\nüìö **GUIDE D'INSTALLATION RAPIDE**")
    print("=" * 50)
    
    print("üîß **Installation automatique:**")
    print("   python setup_voice_conversation.py")
    print()
    
    print("üîß **Installation manuelle:**")
    print("   1. pip install -r requirements_voice.txt")
    print("   2. T√©l√©charger le mod√®le Vosk fran√ßais:")
    print("      https://alphacephei.com/vosk/models/vosk-model-small-fr-0.22.zip")
    print("   3. D√©compresser dans le dossier du projet")
    print()
    
    print("üîë **Configuration APIs (optionnel):**")
    print("   1. Copier api_keys_template.yaml vers api_keys.yaml")
    print("   2. Renseigner les cl√©s Google Cloud")
    print()
    
    print("üöÄ **Lancer la d√©mo:**")
    print("   python demo_voice_conversation.py")

def main():
    """Test principal"""
    print("üß™ TESTS GUARDIAN CONVERSATION VOCALE")
    print("=" * 60)
    
    # Tests des composants
    results = test_voice_conversation_components()
    
    # Test d'initialisation si possible
    if results.get('voice_agent_import', False):
        agent_ok = test_voice_agent_initialization()
    else:
        agent_ok = False
        
    # R√©sum√© des tests
    print("\nüìä **R√âSUM√â DES TESTS**")
    print("=" * 40)
    
    total_tests = len([k for k in results.keys() if not k.startswith('api_')])
    passed_tests = len([v for k, v in results.items() if v and not k.startswith('api_')])
    
    print(f"‚úÖ Tests r√©ussis: {passed_tests}/{total_tests}")
    
    if agent_ok:
        print("üéâ Agent de conversation vocal fonctionnel !")
        print("üöÄ Pr√™t pour la d√©mo: python demo_voice_conversation.py")
    else:
        print("‚ö†Ô∏è Installation incompl√®te")
        show_installation_guide()
        
    print("\nüîö Fin des tests")

if __name__ == "__main__":
    main()