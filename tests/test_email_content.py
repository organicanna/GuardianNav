#!/usr/bin/env python3
"""
Test du contenu d'email avec localisation et situation r√©elles
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

import yaml
from guardian.gmail_emergency_agent import GmailEmergencyAgent

def test_email_content():
    """Test le contenu de l'email avec les vraies informations"""
    
    print("üìß TEST CONTENU EMAIL AVEC VRAIES INFORMATIONS")
    print("="*50)
    
    # Charger la configuration
    with open('api_keys.yaml', 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    # Cr√©er l'agent Gmail
    gmail_agent = GmailEmergencyAgent(config)
    
    if not gmail_agent.is_available:
        print("‚ùå Gmail Agent non disponible")
        return
    
    # Informations de test r√©elles
    user_name = "Camille Dupont"
    real_location = "8 rue de Londres, 75009 Paris (bureaux Google France), pr√®s de la gare Saint-Lazare"
    real_situation = "√Ä l'aide ! Quelqu'un me suit depuis le m√©tro, j'ai tr√®s peur"
    user_phone = "+33612345678"
    location_coords = (48.8756, 2.3264)  # Coordonn√©es exactes Google France
    
    print(f"üë§ Utilisateur: {user_name}")
    print(f"üìç Localisation: {real_location}")
    print(f"‚ö†Ô∏è Situation: {real_situation}")
    print(f"üìû T√©l√©phone: {user_phone}")
    print()
    
    # G√©n√©rer l'email
    try:
        subject, html_body, text_body = gmail_agent.create_emergency_email(
            recipient_email="test@example.com",
            user_name=user_name,
            location=real_location,
            situation=real_situation,
            location_coords=location_coords,
            emergency_type="üö® Alerte Guardian - Situation d'urgence",
            urgency_level="√©lev√©e",
            user_phone=user_phone
        )
        
        print("‚úÖ EMAIL G√âN√âR√â AVEC SUCC√àS")
        print(f"üìù Sujet: {subject}")
        print(f"üìÑ Taille HTML: {len(html_body)} caract√®res")
        print(f"üìÑ Taille texte: {len(text_body)} caract√®res")
        print()
        
        # V√©rifications du contenu
        print("üîç V√âRIFICATIONS DU CONTENU:")
        
        # V√©rifier la localisation
        if real_location in html_body:
            print("‚úÖ Localisation exacte trouv√©e dans l'email")
        else:
            print("‚ùå Localisation exacte MANQUANTE dans l'email")
            print(f"   Recherch√©: {real_location}")
        
        # V√©rifier la situation
        if real_situation in html_body:
            print("‚úÖ Situation rapport√©e trouv√©e dans l'email")
        else:
            print("‚ùå Situation rapport√©e MANQUANTE dans l'email")
            print(f"   Recherch√©: {real_situation}")
        
        # V√©rifier WhatsApp
        whatsapp_count = html_body.count('WhatsApp')
        wame_count = html_body.count('wa.me')
        phone_count = html_body.count(user_phone.replace('+', ''))
        
        print(f"üí¨ 'WhatsApp' trouv√©: {whatsapp_count} fois")
        print(f"üîó 'wa.me' trouv√©: {wame_count} fois") 
        print(f"üìû Num√©ro '{user_phone}' trouv√©: {phone_count} fois")
        
        # V√©rifier les coordonn√©es
        if str(location_coords[0]) in html_body and str(location_coords[1]) in html_body:
            print("‚úÖ Coordonn√©es GPS trouv√©es dans l'email")
        else:
            print("‚ö†Ô∏è Coordonn√©es GPS non trouv√©es dans l'email")
        
        # Afficher un extrait de l'email
        print("\nüìÑ EXTRAIT DE L'EMAIL (200 premiers caract√®res du HTML):")
        print("-" * 60)
        print(html_body[:500] + "..." if len(html_body) > 500 else html_body)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration email: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_email_content()