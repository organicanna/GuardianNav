"""
Test et d√©monstration du SpeechAgent pour GuardianNav
Teste la synth√®se vocale avec diff√©rents types de messages d'urgence
"""
import sys
import os
import time
import yaml
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from guardian.speech_agent import SpeechAgent

def load_api_keys():
    """Charge les cl√©s API pour les tests"""
    try:
        with open('api_keys.yaml', 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except Exception as e:
        print(f"Attention: Impossible de charger api_keys.yaml: {e}")
        print("Les tests utiliseront le mode simulation")
        return {}

def test_basic_speech():
    """Test basique de la synth√®se vocale"""
    print("üé§ Test 1: Synth√®se vocale basique")
    print("-" * 40)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    # Test de disponibilit√©
    if speech_agent.is_available():
        print("‚úÖ Agent vocal disponible")
    else:
        print("‚ö†Ô∏è Agent vocal en mode simulation")
    
    # Test simple
    success = speech_agent.test_speech()
    
    time.sleep(2)
    return success

def test_alert_messages():
    """Test des diff√©rents types d'alertes vocales"""
    print("\nüö® Test 2: Messages d'alerte")
    print("-" * 40)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    # Messages d'alerte diff√©rents
    test_alerts = [
        ("emergency", "Alerte d'urgence d√©tect√©e. Tout va bien ? R√©pondez oui ou non."),
        ("fall", "Chute √† v√©lo d√©tect√©e, s√©v√©rit√© mod√©r√©e. Restez immobile si vous ressentez des douleurs."),
        ("immobilization", "Immobilit√© prolong√©e d√©tect√©e. Avez-vous besoin d'aide ?"),
        ("confirmation", "OK, merci de votre r√©ponse. Surveillance continue.")
    ]
    
    for i, (alert_type, message) in enumerate(test_alerts, 1):
        print(f"   Test {i}/{len(test_alerts)}: {alert_type}")
        success = speech_agent.speak_alert(alert_type, message)
        
        if success:
            print(f"   ‚úÖ {alert_type} - OK")
        else:
            print(f"   ‚ùå {alert_type} - Erreur")
        
        time.sleep(1.5)  # Pause entre les messages

def test_fall_alerts():
    """Test des alertes sp√©cialis√©es pour chutes"""
    print("\nüö¥ Test 3: Alertes de chute sp√©cialis√©es")
    print("-" * 40)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    # Diff√©rents types de chutes
    fall_scenarios = [
        {
            'fall_type': 'chute_velo',
            'severity': 'mod√©r√©e',
            'previous_speed': 25.3,
            'acceleration': -9.2
        },
        {
            'fall_type': 'chute_haute_vitesse', 
            'severity': 'grave',
            'previous_speed': 35.8,
            'acceleration': -12.5
        },
        {
            'fall_type': 'impact_brutal',
            'severity': 'critique',
            'previous_speed': 15.2,
            'acceleration': -15.8
        }
    ]
    
    for i, fall_info in enumerate(fall_scenarios, 1):
        fall_type = fall_info['fall_type']
        print(f"   Test {i}/{len(fall_scenarios)}: {fall_type}")
        
        success = speech_agent.speak_fall_alert(fall_info)
        
        if success:
            print(f"   ‚úÖ {fall_type} - Synth√®se r√©ussie")
        else:
            print(f"   ‚ùå {fall_type} - Erreur synth√®se")
        
        time.sleep(2)  # Pause plus longue pour les chutes

def test_emergency_instructions():
    """Test des instructions d'urgence vocales"""
    print("\nüìã Test 4: Instructions d'urgence")
    print("-" * 40)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    # Instructions d'urgence typiques
    instructions_sets = [
        [
            "Appelez le 15 pour une urgence m√©dicale",
            "Restez calme et d√©crivez votre situation",
            "Donnez votre position exacte"
        ],
        [
            "Dirigez-vous vers le refuge le plus proche",
            "Utilisez les transports publics si disponibles",
            "Restez en contact avec vos proches",
            "√âvitez les zones isol√©es",
            "Gardez votre t√©l√©phone charg√©"
        ]
    ]
    
    for i, instructions in enumerate(instructions_sets, 1):
        print(f"   Test {i}/{len(instructions_sets)}: {len(instructions)} instructions")
        
        success = speech_agent.speak_emergency_instructions(instructions)
        
        if success:
            print(f"   ‚úÖ Instructions {i} - Synth√®se r√©ussie")
        else:
            print(f"   ‚ùå Instructions {i} - Erreur synth√®se")
        
        time.sleep(2)

def test_priority_levels():
    """Test des diff√©rents niveaux de priorit√©"""
    print("\n‚ö° Test 5: Niveaux de priorit√©")
    print("-" * 40)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    test_message = "Ceci est un test de priorit√© vocale pour GuardianNav."
    
    priorities = ["normal", "urgent", "critical"]
    
    for priority in priorities:
        print(f"   Test priorit√©: {priority}")
        
        success = speech_agent.speak(test_message, priority)
        
        if success:
            print(f"   ‚úÖ {priority} - Synth√®se r√©ussie")
        else:
            print(f"   ‚ùå {priority} - Erreur synth√®se")
        
        time.sleep(1.5)

def test_google_tts_integration():
    """Test sp√©cifique de l'int√©gration Google TTS"""
    print("\nüåê Test 6: Int√©gration Google TTS")
    print("-" * 40)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    # V√©rifier la configuration Google TTS
    if speech_agent.tts_client:
        print("   ‚úÖ Client Google TTS configur√©")
        
        # Test avec un message d'urgence r√©aliste
        emergency_message = "Alerte GuardianNav. Une situation d'urgence a √©t√© d√©tect√©e. V√©rifiez imm√©diatement votre √©tat et celui de vos proches."
        
        print("   Synth√®se avec Google TTS...")
        success = speech_agent.speak(emergency_message, "urgent")
        
        if success:
            print("   ‚úÖ Google TTS - Synth√®se r√©ussie")
        else:
            print("   ‚ùå Google TTS - Erreur lors de la synth√®se")
    else:
        print("   ‚ö†Ô∏è Client Google TTS non disponible")
        print("   üîÑ Test en mode simulation...")
        
        success = speech_agent.speak("Test de simulation vocale GuardianNav", "normal")
        
        if success:
            print("   ‚úÖ Mode simulation - Fonctionnel")
        else:
            print("   ‚ùå Mode simulation - Erreur")

def demonstrate_full_emergency_scenario():
    """D√©monstration compl√®te d'un sc√©nario d'urgence avec synth√®se vocale"""
    print("\nüé≠ D√âMONSTRATION: Sc√©nario d'urgence complet")
    print("=" * 50)
    
    api_keys = load_api_keys()
    speech_agent = SpeechAgent(api_keys)
    
    print("üì± Simulation d'une s√©quence d'urgence GuardianNav...")
    time.sleep(1)
    
    # 1. D√©tection d'alerte
    print("\n1Ô∏è‚É£ D√©tection d'immobilit√© prolong√©e")
    speech_agent.speak_alert("immobilization", "Immobilit√© prolong√©e d√©tect√©e. Tout va bien ? R√©pondez oui ou non.")
    time.sleep(3)
    
    # 2. Pas de r√©ponse - escalade
    print("\n2Ô∏è‚É£ Aucune r√©ponse - escalade")
    speech_agent.speak_alert("emergency", "Aucune r√©ponse d√©tect√©e. Je d√©clenche automatiquement l'assistance d'urgence.")
    time.sleep(3)
    
    # 3. Instructions d'urgence
    print("\n3Ô∏è‚É£ Instructions d'urgence")
    emergency_instructions = [
        "Vos contacts d'urgence ont √©t√© alert√©s",
        "Votre position a √©t√© partag√©e",
        "Les secours arrivent"
    ]
    speech_agent.speak_emergency_instructions(emergency_instructions)
    time.sleep(3)
    
    # 4. Confirmation finale
    print("\n4Ô∏è‚É£ Confirmation finale")
    speech_agent.speak_alert("confirmation", "Assistance d'urgence d√©clench√©e. Restez calme, l'aide est en route.")
    
    print("\n‚úÖ D√©monstration termin√©e")

def main():
    """Fonction principale du test"""
    print("üé§ TESTS DE SYNTH√àSE VOCALE - GUARDIANNAV")
    print("=" * 50)
    print("Ces tests v√©rifient le fonctionnement du SpeechAgent")
    print("avec diff√©rents types de messages et priorit√©s.\n")
    
    try:
        # Tests individuels
        test_basic_speech()
        test_alert_messages() 
        test_fall_alerts()
        test_emergency_instructions()
        test_priority_levels()
        test_google_tts_integration()
        
        # D√©monstration compl√®te
        print("\n" + "="*50)
        user_input = input("Voulez-vous voir une d√©monstration compl√®te ? (o/n): ")
        
        if user_input.lower() in ['o', 'oui', 'y', 'yes']:
            demonstrate_full_emergency_scenario()
        
        print("\nüéâ TESTS TERMIN√âS")
        print("La synth√®se vocale GuardianNav est pr√™te √† fonctionner!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Tests interrompus par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()