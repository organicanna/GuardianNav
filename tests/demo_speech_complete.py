"""
D√©monstration de la synth√®se vocale GuardianNav
Teste la nouvelle fonctionnalit√© de synth√®se vocale avec Google TTS
"""
import sys
import time
import yaml
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

def demo_speech_integration():
    """D√©monstration compl√®te de l'int√©gration vocale"""
    
    print("üé§ D√âMONSTRATION SYNTH√àSE VOCALE GUARDIANNAV")
    print("=" * 55)
    print("Cette d√©monstration teste la nouvelle fonctionnalit√©")
    print("de synth√®se vocale int√©gr√©e √† GuardianNav.\n")
    
    # Charger la configuration
    try:
        from guardian.guardian_agent import GuardianOrchestrator
        from guardian.config import Config
        
        config = Config()
        
        # Charger les cl√©s API
        try:
            with open('api_keys.yaml', 'r', encoding='utf-8') as f:
                api_keys_config = yaml.safe_load(f)
            print("‚úÖ Cl√©s API charg√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è  Cl√©s API non disponibles: {e}")
            print("üîÑ Utilisation du mode simulation")
            api_keys_config = {}
        
        # Cr√©er l'orchestrateur avec synth√®se vocale
        print("\nü§ñ Initialisation de GuardianNav avec synth√®se vocale...")
        
        # Configuration minimale pour la d√©mo
        demo_config = {
            'emergency_response': {
                'timeout_seconds': 30,
                'emergency_contacts': [
                    {
                        'name': 'Contact D√©mo',
                        'email': 'demo@example.com',
                        'phone': '+33123456789'
                    }
                ],
                'email': {
                    'enabled': False  # D√©sactiv√© pour la d√©mo
                }
            }
        }
        
        orchestrator = GuardianOrchestrator(demo_config)
        
        # Tester la disponibilit√© de la synth√®se vocale
        if orchestrator.speech_agent.is_available():
            print("üîä Synth√®se vocale disponible")
            
            if orchestrator.speech_agent.tts_client:
                print("üåê Google Text-to-Speech configur√©")
            else:
                print("üé≠ Mode simulation activ√©")
        else:
            print("‚ùå Synth√®se vocale non disponible")
            return
        
        # D√©monstration des diff√©rents types de messages
        print("\n" + "="*55)
        print("üé≠ D√âMONSTRATION DES MESSAGES VOCAUX")
        print("="*55)
        
        # 1. Message de bienvenue
        print("\n1Ô∏è‚É£ Message de bienvenue")
        orchestrator.speech_agent.speak_alert("info", "Bienvenue dans GuardianNav avec synth√®se vocale int√©gr√©e.")
        time.sleep(3)
        
        # 2. Simulation d'alerte d'immobilit√©
        print("\n2Ô∏è‚É£ Alerte d'immobilit√©")
        orchestrator.current_position = (48.8566, 2.3522)  # Position Paris
        
        print("   üìç Simulation: Immobilit√© prolong√©e d√©tect√©e")
        alert_message = "Immobilit√© prolong√©e d√©tect√©e. Tout va bien ? R√©pondez oui ou non."
        print(f"   üîä Synth√®se: '{alert_message}'")
        orchestrator.speech_agent.speak_alert("immobilization", alert_message)
        time.sleep(4)
        
        # 3. Simulation de r√©ponse positive
        print("\n3Ô∏è‚É£ R√©ponse positive simul√©e")
        print("   ‚úÖ Simulation: Utilisateur r√©pond 'oui'")
        confirmation_message = "OK, merci de votre r√©ponse. Surveillance continue."
        print(f"   üîä Synth√®se: '{confirmation_message}'")
        orchestrator.speech_agent.speak_alert("confirmation", confirmation_message)
        time.sleep(3)
        
        # 4. Simulation de chute
        print("\n4Ô∏è‚É£ D√©tection de chute")
        fall_info = {
            'fall_type': 'chute_velo',
            'severity': 'mod√©r√©e',
            'previous_speed': 25.3,
            'acceleration': -9.2,
            'position': (48.8566, 2.3522)
        }
        
        print("   üö¥ Simulation: Chute √† v√©lo d√©tect√©e")
        print(f"   üìä Vitesse: {fall_info['previous_speed']} km/h")
        print(f"   üìä D√©c√©l√©ration: {fall_info['acceleration']} m/s¬≤")
        
        orchestrator.speech_agent.speak_fall_alert(fall_info)
        time.sleep(4)
        
        # 5. Question post-chute
        print("\n5Ô∏è‚É£ Question post-chute")
        injury_question = "√ätes-vous bless√© ? R√©pondez oui ou non dans les 30 secondes."
        print(f"   üîä Synth√®se: '{injury_question}'")
        orchestrator.speech_agent.speak_alert("emergency", injury_question)
        time.sleep(4)
        
        # 6. Simulation de r√©ponse n√©gative (bless√©)
        print("\n6Ô∏è‚É£ R√©ponse 'oui' - Blessure confirm√©e")
        print("   üö® Simulation: Utilisateur confirme √™tre bless√©")
        emergency_message = "URGENCE CONFIRM√âE. Blessure apr√®s chute. Je d√©clenche imm√©diatement les secours."
        print(f"   üîä Synth√®se: '{emergency_message}'")
        orchestrator.speech_agent.speak_alert("emergency", emergency_message)
        time.sleep(4)
        
        # 7. Instructions d'urgence
        print("\n7Ô∏è‚É£ Instructions d'urgence")
        emergency_instructions = [
            "Vos contacts d'urgence ont √©t√© alert√©s",
            "Votre position a √©t√© partag√©e",
            "Restez calme, les secours arrivent"
        ]
        
        print("   üìã Instructions d'urgence vocales:")
        for instruction in emergency_instructions:
            print(f"      ‚Ä¢ {instruction}")
        
        orchestrator.speech_agent.speak_emergency_instructions(emergency_instructions)
        time.sleep(4)
        
        # 8. Test des priorit√©s
        print("\n8Ô∏è‚É£ Test des niveaux de priorit√©")
        
        priorities = [
            ("normal", "Message de priorit√© normale"),
            ("urgent", "Message de priorit√© urgente"),
            ("critical", "Message de priorit√© critique")
        ]
        
        for priority, message in priorities:
            print(f"   üîä Priorit√© {priority}: {message}")
            orchestrator.speech_agent.speak(message, priority)
            time.sleep(2.5)
        
        # Conclusion
        print("\n" + "="*55)
        print("‚úÖ D√âMONSTRATION TERMIN√âE")
        print("="*55)
        
        conclusion_message = "D√©monstration de synth√®se vocale GuardianNav termin√©e avec succ√®s."
        orchestrator.speech_agent.speak_alert("info", conclusion_message)
        
        print("\nüéâ La synth√®se vocale GuardianNav est op√©rationnelle!")
        print("üîä L'agent peut maintenant parler en plus d'afficher du texte")
        print("üåê Google Text-to-Speech int√©gr√© pour une qualit√© optimale")
        print("üé≠ Mode simulation disponible si API non configur√©")
        print("\nüìù Fonctionnalit√©s ajout√©es:")
        print("   ‚Ä¢ Synth√®se vocale pour toutes les alertes")
        print("   ‚Ä¢ Messages d'urgence avec priorit√©")  
        print("   ‚Ä¢ Instructions vocales sp√©cialis√©es")
        print("   ‚Ä¢ Alertes de chute personnalis√©es")
        print("   ‚Ä¢ Confirmations et feedbacks vocaux")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fonction principale"""
    try:
        demo_speech_integration()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è D√©monstration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")

if __name__ == "__main__":
    main()